{"ast":null,"code":"\"use strict\";\n\nvar support = require(\"./support.js\");\nvar utils = require(\"./utils.js\");\nvar _crc = require(\"./crc32.js\");\nvar signature = require(\"./signature.js\");\nvar defaults = require(\"./defaults.js\");\nvar base64 = require(\"./base64.js\");\nvar compressions = require(\"./compressions.js\");\nvar CompressedObject = require(\"./compressedObject.js\");\nvar nodeBuffer = require(\"./nodeBuffer.js\");\nvar utf8 = require(\"./utf8.js\");\nvar StringWriter = require(\"./stringWriter.js\");\nvar Uint8ArrayWriter = require(\"./uint8ArrayWriter.js\");\n\n/**\n * Returns the raw data of a ZipObject, decompress the content if necessary.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nfunction getRawData(file) {\n  if (file._data instanceof CompressedObject) {\n    file._data = file._data.getContent();\n    file.options.binary = true;\n    file.options.base64 = false;\n    if (utils.getTypeOf(file._data) === \"uint8array\") {\n      var copy = file._data;\n      // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.\n      // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).\n      file._data = new Uint8Array(copy.length);\n      // with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"\n      if (copy.length !== 0) {\n        file._data.set(copy, 0);\n      }\n    }\n  }\n  return file._data;\n}\n\n/**\n * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nfunction getBinaryData(file) {\n  var result = getRawData(file),\n    type = utils.getTypeOf(result);\n  if (type === \"string\") {\n    if (!file.options.binary) {\n      // unicode text !\n      // unicode string => binary string is a painful process, check if we can avoid it.\n      if (support.nodebuffer) {\n        return nodeBuffer(result, \"utf-8\");\n      }\n    }\n    return file.asBinary();\n  }\n  return result;\n}\n\n// return the actual prototype of PizZip\nvar out = {\n  /**\n   * Read an existing zip and merge the data in the current PizZip object.\n   * The implementation is in pizzip-load.js, don't forget to include it.\n   * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load\n   * @param {Object} options Options for loading the stream.\n   *  options.base64 : is the stream in base64 ? default : false\n   * @return {PizZip} the current PizZip object\n   */\n  load: function load() {\n    throw new Error(\"Load method is not defined. Is the file pizzip-load.js included ?\");\n  },\n  /**\n   * Filter nested files/folders with the specified function.\n   * @param {Function} search the predicate to use :\n   * function (relativePath, file) {...}\n   * It takes 2 arguments : the relative path and the file.\n   * @return {Array} An array of matching elements.\n   */\n  filter: function filter(search) {\n    var result = [];\n    var filename, relativePath, file, fileClone;\n    for (filename in this.files) {\n      if (!this.files.hasOwnProperty(filename)) {\n        continue;\n      }\n      file = this.files[filename];\n      // return a new object, don't let the user mess with our internal objects :)\n      fileClone = new ZipObject(file.name, file._data, utils.extend(file.options));\n      relativePath = filename.slice(this.root.length, filename.length);\n      if (filename.slice(0, this.root.length) === this.root &&\n      // the file is in the current root\n      search(relativePath, fileClone)) {\n        // and the file matches the function\n        result.push(fileClone);\n      }\n    }\n    return result;\n  },\n  /**\n   * Add a file to the zip file, or search a file.\n   * @param   {string|RegExp} name The name of the file to add (if data is defined),\n   * the name of the file to find (if no data) or a regex to match files.\n   * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded\n   * @param   {Object} o     File options\n   * @return  {PizZip|Object|Array} this PizZip object (when adding a file),\n   * a file (when searching by string) or an array of files (when searching by regex).\n   */\n  file: function file(name, data, o) {\n    if (arguments.length === 1) {\n      if (utils.isRegExp(name)) {\n        var regexp = name;\n        return this.filter(function (relativePath, file) {\n          return !file.dir && regexp.test(relativePath);\n        });\n      }\n      // text\n      return this.filter(function (relativePath, file) {\n        return !file.dir && relativePath === name;\n      })[0] || null;\n    }\n    // more than one argument : we have data !\n    name = this.root + name;\n    fileAdd.call(this, name, data, o);\n    return this;\n  },\n  /**\n   * Add a directory to the zip file, or search.\n   * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.\n   * @return  {PizZip} an object with the new directory as the root, or an array containing matching folders.\n   */\n  folder: function folder(arg) {\n    if (!arg) {\n      return this;\n    }\n    if (utils.isRegExp(arg)) {\n      return this.filter(function (relativePath, file) {\n        return file.dir && arg.test(relativePath);\n      });\n    }\n\n    // else, name is a new folder\n    var name = this.root + arg;\n    var newFolder = folderAdd.call(this, name);\n\n    // Allow chaining by returning a new object with this folder as the root\n    var ret = this.shallowClone();\n    ret.root = newFolder.name;\n    return ret;\n  },\n  /**\n   * Delete a file, or a directory and all sub-files, from the zip\n   * @param {string} name the name of the file to delete\n   * @return {PizZip} this PizZip object\n   */\n  remove: function remove(name) {\n    name = this.root + name;\n    var file = this.files[name];\n    if (!file) {\n      // Look for any folders\n      if (name.slice(-1) !== \"/\") {\n        name += \"/\";\n      }\n      file = this.files[name];\n    }\n    if (file && !file.dir) {\n      // file\n      delete this.files[name];\n    } else {\n      // maybe a folder, delete recursively\n      var kids = this.filter(function (relativePath, file) {\n        return file.name.slice(0, name.length) === name;\n      });\n      for (var i = 0; i < kids.length; i++) {\n        delete this.files[kids[i].name];\n      }\n    }\n    return this;\n  },\n  /**\n   * Generate the complete zip file\n   * @param {Object} options the options to generate the zip file :\n   * - base64, (deprecated, use type instead) true to generate base64.\n   * - compression, \"STORE\" by default.\n   * - type, \"base64\" by default. Values are : string, base64, uint8array, arraybuffer, blob.\n   * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file\n   */\n  generate: function generate(options) {\n    options = utils.extend(options || {}, {\n      base64: true,\n      compression: \"STORE\",\n      compressionOptions: null,\n      type: \"base64\",\n      platform: \"DOS\",\n      comment: null,\n      mimeType: \"application/zip\",\n      encodeFileName: utf8.utf8encode\n    });\n    utils.checkSupport(options.type);\n\n    // accept nodejs `process.platform`\n    if (options.platform === \"darwin\" || options.platform === \"freebsd\" || options.platform === \"linux\" || options.platform === \"sunos\") {\n      options.platform = \"UNIX\";\n    }\n    if (options.platform === \"win32\") {\n      options.platform = \"DOS\";\n    }\n    var zipData = [],\n      encodedComment = utils.transformTo(\"string\", options.encodeFileName(options.comment || this.comment || \"\"));\n    var localDirLength = 0,\n      centralDirLength = 0,\n      writer,\n      i;\n\n    // first, generate all the zip parts.\n    for (var name in this.files) {\n      if (!this.files.hasOwnProperty(name)) {\n        continue;\n      }\n      var file = this.files[name];\n      var compressionName = file.options.compression || options.compression.toUpperCase();\n      var compression = compressions[compressionName];\n      if (!compression) {\n        throw new Error(compressionName + \" is not a valid compression method !\");\n      }\n      var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};\n      var compressedObject = generateCompressedObjectFrom.call(this, file, compression, compressionOptions);\n      var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength, options.platform, options.encodeFileName);\n      localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;\n      centralDirLength += zipPart.dirRecord.length;\n      zipData.push(zipPart);\n    }\n    var dirEnd = \"\";\n\n    // end of central dir signature\n    dirEnd = signature.CENTRAL_DIRECTORY_END +\n    // number of this disk\n    \"\\x00\\x00\" +\n    // number of the disk with the start of the central directory\n    \"\\x00\\x00\" +\n    // total number of entries in the central directory on this disk\n    decToHex(zipData.length, 2) +\n    // total number of entries in the central directory\n    decToHex(zipData.length, 2) +\n    // size of the central directory   4 bytes\n    decToHex(centralDirLength, 4) +\n    // offset of start of central directory with respect to the starting disk number\n    decToHex(localDirLength, 4) +\n    // .ZIP file comment length\n    decToHex(encodedComment.length, 2) +\n    // .ZIP file comment\n    encodedComment;\n\n    // we have all the parts (and the total length)\n    // time to create a writer !\n    var typeName = options.type.toLowerCase();\n    if (typeName === \"uint8array\" || typeName === \"arraybuffer\" || typeName === \"blob\" || typeName === \"nodebuffer\") {\n      writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);\n    } else {\n      writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);\n    }\n    for (i = 0; i < zipData.length; i++) {\n      writer.append(zipData[i].fileRecord);\n      writer.append(zipData[i].compressedObject.compressedContent);\n    }\n    for (i = 0; i < zipData.length; i++) {\n      writer.append(zipData[i].dirRecord);\n    }\n    writer.append(dirEnd);\n    var zip = writer.finalize();\n    switch (options.type.toLowerCase()) {\n      // case \"zip is an Uint8Array\"\n      case \"uint8array\":\n      case \"arraybuffer\":\n      case \"nodebuffer\":\n        return utils.transformTo(options.type.toLowerCase(), zip);\n      case \"blob\":\n        return utils.arrayBuffer2Blob(utils.transformTo(\"arraybuffer\", zip), options.mimeType);\n      // case \"zip is a string\"\n      case \"base64\":\n        return options.base64 ? base64.encode(zip) : zip;\n      default:\n        // case \"string\" :\n        return zip;\n    }\n  },\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  crc32: function crc32(input, crc) {\n    return _crc(input, crc);\n  },\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  utf8encode: function utf8encode(string) {\n    return utils.transformTo(\"string\", utf8.utf8encode(string));\n  },\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  utf8decode: function utf8decode(input) {\n    return utf8.utf8decode(input);\n  }\n};\n/**\n * Transform this._data into a string.\n * @param {function} filter a function String -> String, applied if not null on the result.\n * @return {String} the string representing this._data.\n */\nfunction dataToString(asUTF8) {\n  var result = getRawData(this);\n  if (result === null || typeof result === \"undefined\") {\n    return \"\";\n  }\n  // if the data is a base64 string, we decode it before checking the encoding !\n  if (this.options.base64) {\n    result = base64.decode(result);\n  }\n  if (asUTF8 && this.options.binary) {\n    // PizZip.prototype.utf8decode supports arrays as input\n    // skip to array => string step, utf8decode will do it.\n    result = out.utf8decode(result);\n  } else {\n    // no utf8 transformation, do the array => string step.\n    result = utils.transformTo(\"string\", result);\n  }\n  if (!asUTF8 && !this.options.binary) {\n    result = utils.transformTo(\"string\", out.utf8encode(result));\n  }\n  return result;\n}\n/**\n * A simple object representing a file in the zip file.\n * @constructor\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data\n * @param {Object} options the options of the file\n */\nfunction ZipObject(name, data, options) {\n  this.name = name;\n  this.dir = options.dir;\n  this.date = options.date;\n  this.comment = options.comment;\n  this.unixPermissions = options.unixPermissions;\n  this.dosPermissions = options.dosPermissions;\n  this._data = data;\n  this.options = options;\n\n  /*\n   * This object contains initial values for dir and date.\n   * With them, we can check if the user changed the deprecated metadata in\n   * `ZipObject#options` or not.\n   */\n  this._initialMetadata = {\n    dir: options.dir,\n    date: options.date\n  };\n}\nZipObject.prototype = {\n  /**\n   * Return the content as UTF8 string.\n   * @return {string} the UTF8 string.\n   */\n  asText: function asText() {\n    return dataToString.call(this, true);\n  },\n  /**\n   * Returns the binary content.\n   * @return {string} the content as binary.\n   */\n  asBinary: function asBinary() {\n    return dataToString.call(this, false);\n  },\n  /**\n   * Returns the content as a nodejs Buffer.\n   * @return {Buffer} the content as a Buffer.\n   */\n  asNodeBuffer: function asNodeBuffer() {\n    var result = getBinaryData(this);\n    return utils.transformTo(\"nodebuffer\", result);\n  },\n  /**\n   * Returns the content as an Uint8Array.\n   * @return {Uint8Array} the content as an Uint8Array.\n   */\n  asUint8Array: function asUint8Array() {\n    var result = getBinaryData(this);\n    return utils.transformTo(\"uint8array\", result);\n  },\n  /**\n   * Returns the content as an ArrayBuffer.\n   * @return {ArrayBuffer} the content as an ArrayBufer.\n   */\n  asArrayBuffer: function asArrayBuffer() {\n    return this.asUint8Array().buffer;\n  }\n};\n\n/**\n * Transform an integer into a string in hexadecimal.\n * @private\n * @param {number} dec the number to convert.\n * @param {number} bytes the number of bytes to generate.\n * @returns {string} the result.\n */\nfunction decToHex(dec, bytes) {\n  var hex = \"\",\n    i;\n  for (i = 0; i < bytes; i++) {\n    hex += String.fromCharCode(dec & 0xff);\n    dec >>>= 8;\n  }\n  return hex;\n}\n\n/**\n * Transforms the (incomplete) options from the user into the complete\n * set of options to create a file.\n * @private\n * @param {Object} o the options from the user.\n * @return {Object} the complete set of options.\n */\nfunction prepareFileAttrs(o) {\n  o = o || {};\n  if (o.base64 === true && (o.binary === null || o.binary === undefined)) {\n    o.binary = true;\n  }\n  o = utils.extend(o, defaults);\n  o.date = o.date || new Date();\n  if (o.compression !== null) {\n    o.compression = o.compression.toUpperCase();\n  }\n  return o;\n}\n\n/**\n * Add a file in the current folder.\n * @private\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file\n * @param {Object} o the options of the file\n * @return {Object} the new file.\n */\nfunction fileAdd(name, data, o) {\n  // be sure sub folders exist\n  var dataType = utils.getTypeOf(data),\n    parent;\n  o = prepareFileAttrs(o);\n  if (typeof o.unixPermissions === \"string\") {\n    o.unixPermissions = parseInt(o.unixPermissions, 8);\n  }\n\n  // UNX_IFDIR  0040000 see zipinfo.c\n  if (o.unixPermissions && o.unixPermissions & 0x4000) {\n    o.dir = true;\n  }\n  // Bit 4    Directory\n  if (o.dosPermissions && o.dosPermissions & 0x0010) {\n    o.dir = true;\n  }\n  if (o.dir) {\n    name = forceTrailingSlash(name);\n  }\n  if (o.createFolders && (parent = parentFolder(name))) {\n    folderAdd.call(this, parent, true);\n  }\n  if (o.dir || data === null || typeof data === \"undefined\") {\n    o.base64 = false;\n    o.binary = false;\n    data = null;\n    dataType = null;\n  } else if (dataType === \"string\") {\n    if (o.binary && !o.base64) {\n      // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask\n      if (o.optimizedBinaryString !== true) {\n        // this is a string, not in a base64 format.\n        // Be sure that this is a correct \"binary string\"\n        data = utils.string2binary(data);\n      }\n    }\n  } else {\n    // arraybuffer, uint8array, ...\n    o.base64 = false;\n    o.binary = true;\n    if (!dataType && !(data instanceof CompressedObject)) {\n      throw new Error(\"The data of '\" + name + \"' is in an unsupported format !\");\n    }\n\n    // special case : it's way easier to work with Uint8Array than with ArrayBuffer\n    if (dataType === \"arraybuffer\") {\n      data = utils.transformTo(\"uint8array\", data);\n    }\n  }\n  var object = new ZipObject(name, data, o);\n  this.files[name] = object;\n  return object;\n}\n\n/**\n * Find the parent folder of the path.\n * @private\n * @param {string} path the path to use\n * @return {string} the parent folder, or \"\"\n */\nfunction parentFolder(path) {\n  if (path.slice(-1) === \"/\") {\n    path = path.substring(0, path.length - 1);\n  }\n  var lastSlash = path.lastIndexOf(\"/\");\n  return lastSlash > 0 ? path.substring(0, lastSlash) : \"\";\n}\n\n/**\n * Returns the path with a slash at the end.\n * @private\n * @param {String} path the path to check.\n * @return {String} the path with a trailing slash.\n */\nfunction forceTrailingSlash(path) {\n  // Check the name ends with a /\n  if (path.slice(-1) !== \"/\") {\n    path += \"/\"; // IE doesn't like substr(-1)\n  }\n  return path;\n}\n/**\n * Add a (sub) folder in the current folder.\n * @private\n * @param {string} name the folder's name\n * @param {boolean=} [createFolders] If true, automatically create sub\n *  folders. Defaults to false.\n * @return {Object} the new folder.\n */\nfunction folderAdd(name, createFolders) {\n  createFolders = typeof createFolders !== \"undefined\" ? createFolders : false;\n  name = forceTrailingSlash(name);\n\n  // Does this folder already exist?\n  if (!this.files[name]) {\n    fileAdd.call(this, name, null, {\n      dir: true,\n      createFolders: createFolders\n    });\n  }\n  return this.files[name];\n}\n\n/**\n * Generate a PizZip.CompressedObject for a given zipOject.\n * @param {ZipObject} file the object to read.\n * @param {PizZip.compression} compression the compression to use.\n * @param {Object} compressionOptions the options to use when compressing.\n * @return {PizZip.CompressedObject} the compressed result.\n */\nfunction generateCompressedObjectFrom(file, compression, compressionOptions) {\n  var result = new CompressedObject();\n  var content;\n\n  // the data has not been decompressed, we might reuse things !\n  if (file._data instanceof CompressedObject) {\n    result.uncompressedSize = file._data.uncompressedSize;\n    result.crc32 = file._data.crc32;\n    if (result.uncompressedSize === 0 || file.dir) {\n      compression = compressions.STORE;\n      result.compressedContent = \"\";\n      result.crc32 = 0;\n    } else if (file._data.compressionMethod === compression.magic) {\n      result.compressedContent = file._data.getCompressedContent();\n    } else {\n      content = file._data.getContent();\n      // need to decompress / recompress\n      result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);\n    }\n  } else {\n    // have uncompressed data\n    content = getBinaryData(file);\n    if (!content || content.length === 0 || file.dir) {\n      compression = compressions.STORE;\n      content = \"\";\n    }\n    result.uncompressedSize = content.length;\n    result.crc32 = _crc(content);\n    result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);\n  }\n  result.compressedSize = result.compressedContent.length;\n  result.compressionMethod = compression.magic;\n  return result;\n}\n\n/**\n * Generate the UNIX part of the external file attributes.\n * @param {Object} unixPermissions the unix permissions or null.\n * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n * @return {Number} a 32 bit integer.\n *\n * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :\n *\n * TTTTsstrwxrwxrwx0000000000ADVSHR\n * ^^^^____________________________ file type, see zipinfo.c (UNX_*)\n *     ^^^_________________________ setuid, setgid, sticky\n *        ^^^^^^^^^________________ permissions\n *                 ^^^^^^^^^^______ not used ?\n *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only\n */\nfunction generateUnixExternalFileAttr(unixPermissions, isDir) {\n  var result = unixPermissions;\n  if (!unixPermissions) {\n    // I can't use octal values in strict mode, hence the hexa.\n    //  040775 => 0x41fd\n    // 0100664 => 0x81b4\n    result = isDir ? 0x41fd : 0x81b4;\n  }\n  return (result & 0xffff) << 16;\n}\n\n/**\n * Generate the DOS part of the external file attributes.\n * @param {Object} dosPermissions the dos permissions or null.\n * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n * @return {Number} a 32 bit integer.\n *\n * Bit 0     Read-Only\n * Bit 1     Hidden\n * Bit 2     System\n * Bit 3     Volume Label\n * Bit 4     Directory\n * Bit 5     Archive\n */\nfunction generateDosExternalFileAttr(dosPermissions) {\n  // the dir flag is already set for compatibility\n\n  return (dosPermissions || 0) & 0x3f;\n}\n\n/**\n * Generate the various parts used in the construction of the final zip file.\n * @param {string} name the file name.\n * @param {ZipObject} file the file content.\n * @param {PizZip.CompressedObject} compressedObject the compressed object.\n * @param {number} offset the current offset from the start of the zip file.\n * @param {String} platform let's pretend we are this platform (change platform dependents fields)\n * @param {Function} encodeFileName the function to encode the file name / comment.\n * @return {object} the zip parts.\n */\nfunction generateZipParts(name, file, compressedObject, offset, platform, encodeFileName) {\n  var useCustomEncoding = encodeFileName !== utf8.utf8encode,\n    encodedFileName = utils.transformTo(\"string\", encodeFileName(file.name)),\n    utfEncodedFileName = utils.transformTo(\"string\", utf8.utf8encode(file.name)),\n    comment = file.comment || \"\",\n    encodedComment = utils.transformTo(\"string\", encodeFileName(comment)),\n    utfEncodedComment = utils.transformTo(\"string\", utf8.utf8encode(comment)),\n    useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,\n    useUTF8ForComment = utfEncodedComment.length !== comment.length,\n    o = file.options;\n  var dosTime,\n    dosDate,\n    extraFields = \"\",\n    unicodePathExtraField = \"\",\n    unicodeCommentExtraField = \"\",\n    dir,\n    date;\n\n  // handle the deprecated options.dir\n  if (file._initialMetadata.dir !== file.dir) {\n    dir = file.dir;\n  } else {\n    dir = o.dir;\n  }\n\n  // handle the deprecated options.date\n  if (file._initialMetadata.date !== file.date) {\n    date = file.date;\n  } else {\n    date = o.date;\n  }\n  var extFileAttr = 0;\n  var versionMadeBy = 0;\n  if (dir) {\n    // dos or unix, we set the dos dir flag\n    extFileAttr |= 0x00010;\n  }\n  if (platform === \"UNIX\") {\n    versionMadeBy = 0x031e; // UNIX, version 3.0\n    extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);\n  } else {\n    // DOS or other, fallback to DOS\n    versionMadeBy = 0x0014; // DOS, version 2.0\n    extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);\n  }\n\n  // date\n  // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html\n  // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html\n  // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html\n\n  dosTime = date.getHours();\n  dosTime <<= 6;\n  dosTime |= date.getMinutes();\n  dosTime <<= 5;\n  dosTime |= date.getSeconds() / 2;\n  dosDate = date.getFullYear() - 1980;\n  dosDate <<= 4;\n  dosDate |= date.getMonth() + 1;\n  dosDate <<= 5;\n  dosDate |= date.getDate();\n  if (useUTF8ForFileName) {\n    // set the unicode path extra field. unzip needs at least one extra\n    // field to correctly handle unicode path, so using the path is as good\n    // as any other information. This could improve the situation with\n    // other archive managers too.\n    // This field is usually used without the utf8 flag, with a non\n    // unicode path in the header (winrar, winzip). This helps (a bit)\n    // with the messy Windows' default compressed folders feature but\n    // breaks on p7zip which doesn't seek the unicode path extra field.\n    // So for now, UTF-8 everywhere !\n    unicodePathExtraField =\n    // Version\n    decToHex(1, 1) +\n    // NameCRC32\n    decToHex(_crc(encodedFileName), 4) +\n    // UnicodeName\n    utfEncodedFileName;\n    extraFields +=\n    // Info-ZIP Unicode Path Extra Field\n    \"\\x75\\x70\" +\n    // size\n    decToHex(unicodePathExtraField.length, 2) +\n    // content\n    unicodePathExtraField;\n  }\n  if (useUTF8ForComment) {\n    unicodeCommentExtraField =\n    // Version\n    decToHex(1, 1) +\n    // CommentCRC32\n    decToHex(this.crc32(encodedComment), 4) +\n    // UnicodeName\n    utfEncodedComment;\n    extraFields +=\n    // Info-ZIP Unicode Path Extra Field\n    \"\\x75\\x63\" +\n    // size\n    decToHex(unicodeCommentExtraField.length, 2) +\n    // content\n    unicodeCommentExtraField;\n  }\n  var header = \"\";\n\n  // version needed to extract\n  header += \"\\x0A\\x00\";\n  // general purpose bit flag\n  // set bit 11 if utf8\n  header += !useCustomEncoding && (useUTF8ForFileName || useUTF8ForComment) ? \"\\x00\\x08\" : \"\\x00\\x00\";\n  // compression method\n  header += compressedObject.compressionMethod;\n  // last mod file time\n  header += decToHex(dosTime, 2);\n  // last mod file date\n  header += decToHex(dosDate, 2);\n  // crc-32\n  header += decToHex(compressedObject.crc32, 4);\n  // compressed size\n  header += decToHex(compressedObject.compressedSize, 4);\n  // uncompressed size\n  header += decToHex(compressedObject.uncompressedSize, 4);\n  // file name length\n  header += decToHex(encodedFileName.length, 2);\n  // extra field length\n  header += decToHex(extraFields.length, 2);\n  var fileRecord = signature.LOCAL_FILE_HEADER + header + encodedFileName + extraFields;\n  var dirRecord = signature.CENTRAL_FILE_HEADER +\n  // version made by (00: DOS)\n  decToHex(versionMadeBy, 2) +\n  // file header (common to file and central directory)\n  header +\n  // file comment length\n  decToHex(encodedComment.length, 2) +\n  // disk number start\n  \"\\x00\\x00\" +\n  // internal file attributes\n  \"\\x00\\x00\" +\n  // external file attributes\n  decToHex(extFileAttr, 4) +\n  // relative offset of local header\n  decToHex(offset, 4) +\n  // file name\n  encodedFileName +\n  // extra field\n  extraFields +\n  // file comment\n  encodedComment;\n  return {\n    fileRecord: fileRecord,\n    dirRecord: dirRecord,\n    compressedObject: compressedObject\n  };\n}\nmodule.exports = out;","map":{"version":3,"names":["support","require","utils","_crc","signature","defaults","base64","compressions","CompressedObject","nodeBuffer","utf8","StringWriter","Uint8ArrayWriter","getRawData","file","_data","getContent","options","binary","getTypeOf","copy","Uint8Array","length","set","getBinaryData","result","type","nodebuffer","asBinary","out","load","Error","filter","search","filename","relativePath","fileClone","files","hasOwnProperty","ZipObject","name","extend","slice","root","push","data","o","arguments","isRegExp","regexp","dir","test","fileAdd","call","folder","arg","newFolder","folderAdd","ret","shallowClone","remove","kids","i","generate","compression","compressionOptions","platform","comment","mimeType","encodeFileName","utf8encode","checkSupport","zipData","encodedComment","transformTo","localDirLength","centralDirLength","writer","compressionName","toUpperCase","compressedObject","generateCompressedObjectFrom","zipPart","generateZipParts","fileRecord","compressedSize","dirRecord","dirEnd","CENTRAL_DIRECTORY_END","decToHex","typeName","toLowerCase","append","compressedContent","zip","finalize","arrayBuffer2Blob","encode","crc32","input","crc","string","utf8decode","dataToString","asUTF8","decode","date","unixPermissions","dosPermissions","_initialMetadata","prototype","asText","asNodeBuffer","asUint8Array","asArrayBuffer","buffer","dec","bytes","hex","String","fromCharCode","prepareFileAttrs","undefined","Date","dataType","parent","parseInt","forceTrailingSlash","createFolders","parentFolder","optimizedBinaryString","string2binary","object","path","substring","lastSlash","lastIndexOf","content","uncompressedSize","STORE","compressionMethod","magic","getCompressedContent","compress","compressInputType","generateUnixExternalFileAttr","isDir","generateDosExternalFileAttr","offset","useCustomEncoding","encodedFileName","utfEncodedFileName","utfEncodedComment","useUTF8ForFileName","useUTF8ForComment","dosTime","dosDate","extraFields","unicodePathExtraField","unicodeCommentExtraField","extFileAttr","versionMadeBy","getHours","getMinutes","getSeconds","getFullYear","getMonth","getDate","header","LOCAL_FILE_HEADER","CENTRAL_FILE_HEADER","module","exports"],"sources":["C:/Users/79131/OneDrive/Рабочий стол/хлам/react project/client/node_modules/pizzip/js/object.js"],"sourcesContent":["\"use strict\";\n\nvar support = require(\"./support.js\");\nvar utils = require(\"./utils.js\");\nvar _crc = require(\"./crc32.js\");\nvar signature = require(\"./signature.js\");\nvar defaults = require(\"./defaults.js\");\nvar base64 = require(\"./base64.js\");\nvar compressions = require(\"./compressions.js\");\nvar CompressedObject = require(\"./compressedObject.js\");\nvar nodeBuffer = require(\"./nodeBuffer.js\");\nvar utf8 = require(\"./utf8.js\");\nvar StringWriter = require(\"./stringWriter.js\");\nvar Uint8ArrayWriter = require(\"./uint8ArrayWriter.js\");\n\n/**\n * Returns the raw data of a ZipObject, decompress the content if necessary.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nfunction getRawData(file) {\n  if (file._data instanceof CompressedObject) {\n    file._data = file._data.getContent();\n    file.options.binary = true;\n    file.options.base64 = false;\n    if (utils.getTypeOf(file._data) === \"uint8array\") {\n      var copy = file._data;\n      // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.\n      // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).\n      file._data = new Uint8Array(copy.length);\n      // with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"\n      if (copy.length !== 0) {\n        file._data.set(copy, 0);\n      }\n    }\n  }\n  return file._data;\n}\n\n/**\n * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nfunction getBinaryData(file) {\n  var result = getRawData(file),\n    type = utils.getTypeOf(result);\n  if (type === \"string\") {\n    if (!file.options.binary) {\n      // unicode text !\n      // unicode string => binary string is a painful process, check if we can avoid it.\n      if (support.nodebuffer) {\n        return nodeBuffer(result, \"utf-8\");\n      }\n    }\n    return file.asBinary();\n  }\n  return result;\n}\n\n// return the actual prototype of PizZip\nvar out = {\n  /**\n   * Read an existing zip and merge the data in the current PizZip object.\n   * The implementation is in pizzip-load.js, don't forget to include it.\n   * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load\n   * @param {Object} options Options for loading the stream.\n   *  options.base64 : is the stream in base64 ? default : false\n   * @return {PizZip} the current PizZip object\n   */\n  load: function load() {\n    throw new Error(\"Load method is not defined. Is the file pizzip-load.js included ?\");\n  },\n  /**\n   * Filter nested files/folders with the specified function.\n   * @param {Function} search the predicate to use :\n   * function (relativePath, file) {...}\n   * It takes 2 arguments : the relative path and the file.\n   * @return {Array} An array of matching elements.\n   */\n  filter: function filter(search) {\n    var result = [];\n    var filename, relativePath, file, fileClone;\n    for (filename in this.files) {\n      if (!this.files.hasOwnProperty(filename)) {\n        continue;\n      }\n      file = this.files[filename];\n      // return a new object, don't let the user mess with our internal objects :)\n      fileClone = new ZipObject(file.name, file._data, utils.extend(file.options));\n      relativePath = filename.slice(this.root.length, filename.length);\n      if (filename.slice(0, this.root.length) === this.root &&\n      // the file is in the current root\n      search(relativePath, fileClone)) {\n        // and the file matches the function\n        result.push(fileClone);\n      }\n    }\n    return result;\n  },\n  /**\n   * Add a file to the zip file, or search a file.\n   * @param   {string|RegExp} name The name of the file to add (if data is defined),\n   * the name of the file to find (if no data) or a regex to match files.\n   * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded\n   * @param   {Object} o     File options\n   * @return  {PizZip|Object|Array} this PizZip object (when adding a file),\n   * a file (when searching by string) or an array of files (when searching by regex).\n   */\n  file: function file(name, data, o) {\n    if (arguments.length === 1) {\n      if (utils.isRegExp(name)) {\n        var regexp = name;\n        return this.filter(function (relativePath, file) {\n          return !file.dir && regexp.test(relativePath);\n        });\n      }\n      // text\n      return this.filter(function (relativePath, file) {\n        return !file.dir && relativePath === name;\n      })[0] || null;\n    }\n    // more than one argument : we have data !\n    name = this.root + name;\n    fileAdd.call(this, name, data, o);\n    return this;\n  },\n  /**\n   * Add a directory to the zip file, or search.\n   * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.\n   * @return  {PizZip} an object with the new directory as the root, or an array containing matching folders.\n   */\n  folder: function folder(arg) {\n    if (!arg) {\n      return this;\n    }\n    if (utils.isRegExp(arg)) {\n      return this.filter(function (relativePath, file) {\n        return file.dir && arg.test(relativePath);\n      });\n    }\n\n    // else, name is a new folder\n    var name = this.root + arg;\n    var newFolder = folderAdd.call(this, name);\n\n    // Allow chaining by returning a new object with this folder as the root\n    var ret = this.shallowClone();\n    ret.root = newFolder.name;\n    return ret;\n  },\n  /**\n   * Delete a file, or a directory and all sub-files, from the zip\n   * @param {string} name the name of the file to delete\n   * @return {PizZip} this PizZip object\n   */\n  remove: function remove(name) {\n    name = this.root + name;\n    var file = this.files[name];\n    if (!file) {\n      // Look for any folders\n      if (name.slice(-1) !== \"/\") {\n        name += \"/\";\n      }\n      file = this.files[name];\n    }\n    if (file && !file.dir) {\n      // file\n      delete this.files[name];\n    } else {\n      // maybe a folder, delete recursively\n      var kids = this.filter(function (relativePath, file) {\n        return file.name.slice(0, name.length) === name;\n      });\n      for (var i = 0; i < kids.length; i++) {\n        delete this.files[kids[i].name];\n      }\n    }\n    return this;\n  },\n  /**\n   * Generate the complete zip file\n   * @param {Object} options the options to generate the zip file :\n   * - base64, (deprecated, use type instead) true to generate base64.\n   * - compression, \"STORE\" by default.\n   * - type, \"base64\" by default. Values are : string, base64, uint8array, arraybuffer, blob.\n   * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file\n   */\n  generate: function generate(options) {\n    options = utils.extend(options || {}, {\n      base64: true,\n      compression: \"STORE\",\n      compressionOptions: null,\n      type: \"base64\",\n      platform: \"DOS\",\n      comment: null,\n      mimeType: \"application/zip\",\n      encodeFileName: utf8.utf8encode\n    });\n    utils.checkSupport(options.type);\n\n    // accept nodejs `process.platform`\n    if (options.platform === \"darwin\" || options.platform === \"freebsd\" || options.platform === \"linux\" || options.platform === \"sunos\") {\n      options.platform = \"UNIX\";\n    }\n    if (options.platform === \"win32\") {\n      options.platform = \"DOS\";\n    }\n    var zipData = [],\n      encodedComment = utils.transformTo(\"string\", options.encodeFileName(options.comment || this.comment || \"\"));\n    var localDirLength = 0,\n      centralDirLength = 0,\n      writer,\n      i;\n\n    // first, generate all the zip parts.\n    for (var name in this.files) {\n      if (!this.files.hasOwnProperty(name)) {\n        continue;\n      }\n      var file = this.files[name];\n      var compressionName = file.options.compression || options.compression.toUpperCase();\n      var compression = compressions[compressionName];\n      if (!compression) {\n        throw new Error(compressionName + \" is not a valid compression method !\");\n      }\n      var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};\n      var compressedObject = generateCompressedObjectFrom.call(this, file, compression, compressionOptions);\n      var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength, options.platform, options.encodeFileName);\n      localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;\n      centralDirLength += zipPart.dirRecord.length;\n      zipData.push(zipPart);\n    }\n    var dirEnd = \"\";\n\n    // end of central dir signature\n    dirEnd = signature.CENTRAL_DIRECTORY_END +\n    // number of this disk\n    \"\\x00\\x00\" +\n    // number of the disk with the start of the central directory\n    \"\\x00\\x00\" +\n    // total number of entries in the central directory on this disk\n    decToHex(zipData.length, 2) +\n    // total number of entries in the central directory\n    decToHex(zipData.length, 2) +\n    // size of the central directory   4 bytes\n    decToHex(centralDirLength, 4) +\n    // offset of start of central directory with respect to the starting disk number\n    decToHex(localDirLength, 4) +\n    // .ZIP file comment length\n    decToHex(encodedComment.length, 2) +\n    // .ZIP file comment\n    encodedComment;\n\n    // we have all the parts (and the total length)\n    // time to create a writer !\n    var typeName = options.type.toLowerCase();\n    if (typeName === \"uint8array\" || typeName === \"arraybuffer\" || typeName === \"blob\" || typeName === \"nodebuffer\") {\n      writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);\n    } else {\n      writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);\n    }\n    for (i = 0; i < zipData.length; i++) {\n      writer.append(zipData[i].fileRecord);\n      writer.append(zipData[i].compressedObject.compressedContent);\n    }\n    for (i = 0; i < zipData.length; i++) {\n      writer.append(zipData[i].dirRecord);\n    }\n    writer.append(dirEnd);\n    var zip = writer.finalize();\n    switch (options.type.toLowerCase()) {\n      // case \"zip is an Uint8Array\"\n      case \"uint8array\":\n      case \"arraybuffer\":\n      case \"nodebuffer\":\n        return utils.transformTo(options.type.toLowerCase(), zip);\n      case \"blob\":\n        return utils.arrayBuffer2Blob(utils.transformTo(\"arraybuffer\", zip), options.mimeType);\n      // case \"zip is a string\"\n      case \"base64\":\n        return options.base64 ? base64.encode(zip) : zip;\n      default:\n        // case \"string\" :\n        return zip;\n    }\n  },\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  crc32: function crc32(input, crc) {\n    return _crc(input, crc);\n  },\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  utf8encode: function utf8encode(string) {\n    return utils.transformTo(\"string\", utf8.utf8encode(string));\n  },\n  /**\n   * @deprecated\n   * This method will be removed in a future version without replacement.\n   */\n  utf8decode: function utf8decode(input) {\n    return utf8.utf8decode(input);\n  }\n};\n/**\n * Transform this._data into a string.\n * @param {function} filter a function String -> String, applied if not null on the result.\n * @return {String} the string representing this._data.\n */\nfunction dataToString(asUTF8) {\n  var result = getRawData(this);\n  if (result === null || typeof result === \"undefined\") {\n    return \"\";\n  }\n  // if the data is a base64 string, we decode it before checking the encoding !\n  if (this.options.base64) {\n    result = base64.decode(result);\n  }\n  if (asUTF8 && this.options.binary) {\n    // PizZip.prototype.utf8decode supports arrays as input\n    // skip to array => string step, utf8decode will do it.\n    result = out.utf8decode(result);\n  } else {\n    // no utf8 transformation, do the array => string step.\n    result = utils.transformTo(\"string\", result);\n  }\n  if (!asUTF8 && !this.options.binary) {\n    result = utils.transformTo(\"string\", out.utf8encode(result));\n  }\n  return result;\n}\n/**\n * A simple object representing a file in the zip file.\n * @constructor\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data\n * @param {Object} options the options of the file\n */\nfunction ZipObject(name, data, options) {\n  this.name = name;\n  this.dir = options.dir;\n  this.date = options.date;\n  this.comment = options.comment;\n  this.unixPermissions = options.unixPermissions;\n  this.dosPermissions = options.dosPermissions;\n  this._data = data;\n  this.options = options;\n\n  /*\n   * This object contains initial values for dir and date.\n   * With them, we can check if the user changed the deprecated metadata in\n   * `ZipObject#options` or not.\n   */\n  this._initialMetadata = {\n    dir: options.dir,\n    date: options.date\n  };\n}\nZipObject.prototype = {\n  /**\n   * Return the content as UTF8 string.\n   * @return {string} the UTF8 string.\n   */\n  asText: function asText() {\n    return dataToString.call(this, true);\n  },\n  /**\n   * Returns the binary content.\n   * @return {string} the content as binary.\n   */\n  asBinary: function asBinary() {\n    return dataToString.call(this, false);\n  },\n  /**\n   * Returns the content as a nodejs Buffer.\n   * @return {Buffer} the content as a Buffer.\n   */\n  asNodeBuffer: function asNodeBuffer() {\n    var result = getBinaryData(this);\n    return utils.transformTo(\"nodebuffer\", result);\n  },\n  /**\n   * Returns the content as an Uint8Array.\n   * @return {Uint8Array} the content as an Uint8Array.\n   */\n  asUint8Array: function asUint8Array() {\n    var result = getBinaryData(this);\n    return utils.transformTo(\"uint8array\", result);\n  },\n  /**\n   * Returns the content as an ArrayBuffer.\n   * @return {ArrayBuffer} the content as an ArrayBufer.\n   */\n  asArrayBuffer: function asArrayBuffer() {\n    return this.asUint8Array().buffer;\n  }\n};\n\n/**\n * Transform an integer into a string in hexadecimal.\n * @private\n * @param {number} dec the number to convert.\n * @param {number} bytes the number of bytes to generate.\n * @returns {string} the result.\n */\nfunction decToHex(dec, bytes) {\n  var hex = \"\",\n    i;\n  for (i = 0; i < bytes; i++) {\n    hex += String.fromCharCode(dec & 0xff);\n    dec >>>= 8;\n  }\n  return hex;\n}\n\n/**\n * Transforms the (incomplete) options from the user into the complete\n * set of options to create a file.\n * @private\n * @param {Object} o the options from the user.\n * @return {Object} the complete set of options.\n */\nfunction prepareFileAttrs(o) {\n  o = o || {};\n  if (o.base64 === true && (o.binary === null || o.binary === undefined)) {\n    o.binary = true;\n  }\n  o = utils.extend(o, defaults);\n  o.date = o.date || new Date();\n  if (o.compression !== null) {\n    o.compression = o.compression.toUpperCase();\n  }\n  return o;\n}\n\n/**\n * Add a file in the current folder.\n * @private\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file\n * @param {Object} o the options of the file\n * @return {Object} the new file.\n */\nfunction fileAdd(name, data, o) {\n  // be sure sub folders exist\n  var dataType = utils.getTypeOf(data),\n    parent;\n  o = prepareFileAttrs(o);\n  if (typeof o.unixPermissions === \"string\") {\n    o.unixPermissions = parseInt(o.unixPermissions, 8);\n  }\n\n  // UNX_IFDIR  0040000 see zipinfo.c\n  if (o.unixPermissions && o.unixPermissions & 0x4000) {\n    o.dir = true;\n  }\n  // Bit 4    Directory\n  if (o.dosPermissions && o.dosPermissions & 0x0010) {\n    o.dir = true;\n  }\n  if (o.dir) {\n    name = forceTrailingSlash(name);\n  }\n  if (o.createFolders && (parent = parentFolder(name))) {\n    folderAdd.call(this, parent, true);\n  }\n  if (o.dir || data === null || typeof data === \"undefined\") {\n    o.base64 = false;\n    o.binary = false;\n    data = null;\n    dataType = null;\n  } else if (dataType === \"string\") {\n    if (o.binary && !o.base64) {\n      // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask\n      if (o.optimizedBinaryString !== true) {\n        // this is a string, not in a base64 format.\n        // Be sure that this is a correct \"binary string\"\n        data = utils.string2binary(data);\n      }\n    }\n  } else {\n    // arraybuffer, uint8array, ...\n    o.base64 = false;\n    o.binary = true;\n    if (!dataType && !(data instanceof CompressedObject)) {\n      throw new Error(\"The data of '\" + name + \"' is in an unsupported format !\");\n    }\n\n    // special case : it's way easier to work with Uint8Array than with ArrayBuffer\n    if (dataType === \"arraybuffer\") {\n      data = utils.transformTo(\"uint8array\", data);\n    }\n  }\n  var object = new ZipObject(name, data, o);\n  this.files[name] = object;\n  return object;\n}\n\n/**\n * Find the parent folder of the path.\n * @private\n * @param {string} path the path to use\n * @return {string} the parent folder, or \"\"\n */\nfunction parentFolder(path) {\n  if (path.slice(-1) === \"/\") {\n    path = path.substring(0, path.length - 1);\n  }\n  var lastSlash = path.lastIndexOf(\"/\");\n  return lastSlash > 0 ? path.substring(0, lastSlash) : \"\";\n}\n\n/**\n * Returns the path with a slash at the end.\n * @private\n * @param {String} path the path to check.\n * @return {String} the path with a trailing slash.\n */\nfunction forceTrailingSlash(path) {\n  // Check the name ends with a /\n  if (path.slice(-1) !== \"/\") {\n    path += \"/\"; // IE doesn't like substr(-1)\n  }\n  return path;\n}\n/**\n * Add a (sub) folder in the current folder.\n * @private\n * @param {string} name the folder's name\n * @param {boolean=} [createFolders] If true, automatically create sub\n *  folders. Defaults to false.\n * @return {Object} the new folder.\n */\nfunction folderAdd(name, createFolders) {\n  createFolders = typeof createFolders !== \"undefined\" ? createFolders : false;\n  name = forceTrailingSlash(name);\n\n  // Does this folder already exist?\n  if (!this.files[name]) {\n    fileAdd.call(this, name, null, {\n      dir: true,\n      createFolders: createFolders\n    });\n  }\n  return this.files[name];\n}\n\n/**\n * Generate a PizZip.CompressedObject for a given zipOject.\n * @param {ZipObject} file the object to read.\n * @param {PizZip.compression} compression the compression to use.\n * @param {Object} compressionOptions the options to use when compressing.\n * @return {PizZip.CompressedObject} the compressed result.\n */\nfunction generateCompressedObjectFrom(file, compression, compressionOptions) {\n  var result = new CompressedObject();\n  var content;\n\n  // the data has not been decompressed, we might reuse things !\n  if (file._data instanceof CompressedObject) {\n    result.uncompressedSize = file._data.uncompressedSize;\n    result.crc32 = file._data.crc32;\n    if (result.uncompressedSize === 0 || file.dir) {\n      compression = compressions.STORE;\n      result.compressedContent = \"\";\n      result.crc32 = 0;\n    } else if (file._data.compressionMethod === compression.magic) {\n      result.compressedContent = file._data.getCompressedContent();\n    } else {\n      content = file._data.getContent();\n      // need to decompress / recompress\n      result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);\n    }\n  } else {\n    // have uncompressed data\n    content = getBinaryData(file);\n    if (!content || content.length === 0 || file.dir) {\n      compression = compressions.STORE;\n      content = \"\";\n    }\n    result.uncompressedSize = content.length;\n    result.crc32 = _crc(content);\n    result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);\n  }\n  result.compressedSize = result.compressedContent.length;\n  result.compressionMethod = compression.magic;\n  return result;\n}\n\n/**\n * Generate the UNIX part of the external file attributes.\n * @param {Object} unixPermissions the unix permissions or null.\n * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n * @return {Number} a 32 bit integer.\n *\n * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :\n *\n * TTTTsstrwxrwxrwx0000000000ADVSHR\n * ^^^^____________________________ file type, see zipinfo.c (UNX_*)\n *     ^^^_________________________ setuid, setgid, sticky\n *        ^^^^^^^^^________________ permissions\n *                 ^^^^^^^^^^______ not used ?\n *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only\n */\nfunction generateUnixExternalFileAttr(unixPermissions, isDir) {\n  var result = unixPermissions;\n  if (!unixPermissions) {\n    // I can't use octal values in strict mode, hence the hexa.\n    //  040775 => 0x41fd\n    // 0100664 => 0x81b4\n    result = isDir ? 0x41fd : 0x81b4;\n  }\n  return (result & 0xffff) << 16;\n}\n\n/**\n * Generate the DOS part of the external file attributes.\n * @param {Object} dosPermissions the dos permissions or null.\n * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n * @return {Number} a 32 bit integer.\n *\n * Bit 0     Read-Only\n * Bit 1     Hidden\n * Bit 2     System\n * Bit 3     Volume Label\n * Bit 4     Directory\n * Bit 5     Archive\n */\nfunction generateDosExternalFileAttr(dosPermissions) {\n  // the dir flag is already set for compatibility\n\n  return (dosPermissions || 0) & 0x3f;\n}\n\n/**\n * Generate the various parts used in the construction of the final zip file.\n * @param {string} name the file name.\n * @param {ZipObject} file the file content.\n * @param {PizZip.CompressedObject} compressedObject the compressed object.\n * @param {number} offset the current offset from the start of the zip file.\n * @param {String} platform let's pretend we are this platform (change platform dependents fields)\n * @param {Function} encodeFileName the function to encode the file name / comment.\n * @return {object} the zip parts.\n */\nfunction generateZipParts(name, file, compressedObject, offset, platform, encodeFileName) {\n  var useCustomEncoding = encodeFileName !== utf8.utf8encode,\n    encodedFileName = utils.transformTo(\"string\", encodeFileName(file.name)),\n    utfEncodedFileName = utils.transformTo(\"string\", utf8.utf8encode(file.name)),\n    comment = file.comment || \"\",\n    encodedComment = utils.transformTo(\"string\", encodeFileName(comment)),\n    utfEncodedComment = utils.transformTo(\"string\", utf8.utf8encode(comment)),\n    useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,\n    useUTF8ForComment = utfEncodedComment.length !== comment.length,\n    o = file.options;\n  var dosTime,\n    dosDate,\n    extraFields = \"\",\n    unicodePathExtraField = \"\",\n    unicodeCommentExtraField = \"\",\n    dir,\n    date;\n\n  // handle the deprecated options.dir\n  if (file._initialMetadata.dir !== file.dir) {\n    dir = file.dir;\n  } else {\n    dir = o.dir;\n  }\n\n  // handle the deprecated options.date\n  if (file._initialMetadata.date !== file.date) {\n    date = file.date;\n  } else {\n    date = o.date;\n  }\n  var extFileAttr = 0;\n  var versionMadeBy = 0;\n  if (dir) {\n    // dos or unix, we set the dos dir flag\n    extFileAttr |= 0x00010;\n  }\n  if (platform === \"UNIX\") {\n    versionMadeBy = 0x031e; // UNIX, version 3.0\n    extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);\n  } else {\n    // DOS or other, fallback to DOS\n    versionMadeBy = 0x0014; // DOS, version 2.0\n    extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);\n  }\n\n  // date\n  // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html\n  // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html\n  // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html\n\n  dosTime = date.getHours();\n  dosTime <<= 6;\n  dosTime |= date.getMinutes();\n  dosTime <<= 5;\n  dosTime |= date.getSeconds() / 2;\n  dosDate = date.getFullYear() - 1980;\n  dosDate <<= 4;\n  dosDate |= date.getMonth() + 1;\n  dosDate <<= 5;\n  dosDate |= date.getDate();\n  if (useUTF8ForFileName) {\n    // set the unicode path extra field. unzip needs at least one extra\n    // field to correctly handle unicode path, so using the path is as good\n    // as any other information. This could improve the situation with\n    // other archive managers too.\n    // This field is usually used without the utf8 flag, with a non\n    // unicode path in the header (winrar, winzip). This helps (a bit)\n    // with the messy Windows' default compressed folders feature but\n    // breaks on p7zip which doesn't seek the unicode path extra field.\n    // So for now, UTF-8 everywhere !\n    unicodePathExtraField =\n    // Version\n    decToHex(1, 1) +\n    // NameCRC32\n    decToHex(_crc(encodedFileName), 4) +\n    // UnicodeName\n    utfEncodedFileName;\n    extraFields +=\n    // Info-ZIP Unicode Path Extra Field\n    \"\\x75\\x70\" +\n    // size\n    decToHex(unicodePathExtraField.length, 2) +\n    // content\n    unicodePathExtraField;\n  }\n  if (useUTF8ForComment) {\n    unicodeCommentExtraField =\n    // Version\n    decToHex(1, 1) +\n    // CommentCRC32\n    decToHex(this.crc32(encodedComment), 4) +\n    // UnicodeName\n    utfEncodedComment;\n    extraFields +=\n    // Info-ZIP Unicode Path Extra Field\n    \"\\x75\\x63\" +\n    // size\n    decToHex(unicodeCommentExtraField.length, 2) +\n    // content\n    unicodeCommentExtraField;\n  }\n  var header = \"\";\n\n  // version needed to extract\n  header += \"\\x0A\\x00\";\n  // general purpose bit flag\n  // set bit 11 if utf8\n  header += !useCustomEncoding && (useUTF8ForFileName || useUTF8ForComment) ? \"\\x00\\x08\" : \"\\x00\\x00\";\n  // compression method\n  header += compressedObject.compressionMethod;\n  // last mod file time\n  header += decToHex(dosTime, 2);\n  // last mod file date\n  header += decToHex(dosDate, 2);\n  // crc-32\n  header += decToHex(compressedObject.crc32, 4);\n  // compressed size\n  header += decToHex(compressedObject.compressedSize, 4);\n  // uncompressed size\n  header += decToHex(compressedObject.uncompressedSize, 4);\n  // file name length\n  header += decToHex(encodedFileName.length, 2);\n  // extra field length\n  header += decToHex(extraFields.length, 2);\n  var fileRecord = signature.LOCAL_FILE_HEADER + header + encodedFileName + extraFields;\n  var dirRecord = signature.CENTRAL_FILE_HEADER +\n  // version made by (00: DOS)\n  decToHex(versionMadeBy, 2) +\n  // file header (common to file and central directory)\n  header +\n  // file comment length\n  decToHex(encodedComment.length, 2) +\n  // disk number start\n  \"\\x00\\x00\" +\n  // internal file attributes\n  \"\\x00\\x00\" +\n  // external file attributes\n  decToHex(extFileAttr, 4) +\n  // relative offset of local header\n  decToHex(offset, 4) +\n  // file name\n  encodedFileName +\n  // extra field\n  extraFields +\n  // file comment\n  encodedComment;\n  return {\n    fileRecord: fileRecord,\n    dirRecord: dirRecord,\n    compressedObject: compressedObject\n  };\n}\nmodule.exports = out;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}