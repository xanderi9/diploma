{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\79131\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\\\u0445\\u043B\\u0430\\u043C\\\\react project\\\\client\\\\src\\\\components\\\\ProtectionSchedule\\\\ViewProtectionSchedulePersons.js\";\nimport React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewProtectionSchedulePersons = ({\n  protection_schedule,\n  students_list_for_schedule\n}) => {\n  const formatDate = dateString => {\n    const parts = dateString.match(/(\\d{2})(\\d{2})(\\d{4})/);\n    if (parts && parts.length === 4) {\n      const year = parts[3];\n      const month = parseInt(parts[2], 10);\n      const day = parseInt(parts[1], 10);\n      const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];\n      return `${day} ${months[month - 1]} ${year}`;\n    } else {\n      return 'Invalid Date';\n    }\n  };\n  const getFullName = studentData => {\n    if (studentData && studentData.student) {\n      const {\n        last_name,\n        first_name,\n        patronymic\n      } = studentData.student;\n      return `${last_name} ${first_name} ${patronymic}`;\n    } else {\n      return 'Unknown';\n    }\n  };\n  const distributeStudentsByProtectionDays = schedule => {\n    const groupedSchedule = {};\n    const addedStudents = [];\n    schedule.forEach((item, index) => {\n      if (!item.group) return;\n      const dateKey = formatDate(item.date);\n      const groupName = item.group ? item.group.name : '';\n      const groupId = item.group ? item.group.id : '';\n\n      // Проверяем, нужно ли добавить студента на следующий день\n      const nextDay = getNextDay(dateKey);\n      const isNextDayStudent = schedule[index + 1] && formatDate(schedule[index + 1].date) === nextDay;\n      if (!groupedSchedule[dateKey]) {\n        groupedSchedule[dateKey] = {};\n      }\n      if (!groupedSchedule[dateKey][groupName]) {\n        groupedSchedule[dateKey][groupName] = [];\n      }\n      const students = students_list_for_schedule.filter(student => student.student.group.id === groupId);\n      students.forEach(student => {\n        const fullName = getFullName(student);\n        const existingStudent = addedStudents.find(s => s === fullName);\n        if (!existingStudent || isNextDayStudent) {\n          // Добавляем студента в текущий день, если он не добавлен ранее или если он добавляется на следующий день\n          groupedSchedule[dateKey][groupName].push({\n            fullName,\n            group: groupName,\n            date: isNextDayStudent ? nextDay : formatDate(item.date)\n          });\n          addedStudents.push(fullName);\n        }\n      });\n    });\n    return groupedSchedule;\n  };\n  const limitStudentsPerDay = schedule => {\n    Object.entries(schedule).forEach(([date, groups]) => {\n      Object.entries(groups).forEach(([group, students]) => {\n        if (students.length > 12) {\n          // Оставляем только первых 12 студентов\n          const firstDayStudents = students.slice(0, 12);\n          const secondDayStudents = students.slice(12);\n          schedule[date][group] = firstDayStudents;\n          const nextDay = getNextDay(date);\n          if (!schedule[nextDay]) {\n            schedule[nextDay] = {};\n          }\n          schedule[nextDay][group] = secondDayStudents;\n        }\n      });\n    });\n    return schedule;\n  };\n  const getNextDay = dateString => {\n    const date = new Date(dateString);\n    date.setDate(date.getDate() + 1);\n    return formatDate(date.toLocaleDateString());\n  };\n  const groupedSchedule = distributeStudentsByProtectionDays(protection_schedule);\n  const limitedSchedule = limitStudentsPerDay(groupedSchedule);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(limitedSchedule).map(([date, groups]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), Object.entries(groups).map(([group, students]) => /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0424\\u0418\\u041E\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0413\\u0440\\u0443\\u043F\\u043F\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0414\\u0430\\u0442\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: students.map((student, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: student.fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: student.group\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: student.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 41\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 29\n        }, this)]\n      }, group, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }, this))]\n    }, date, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_c = ViewProtectionSchedulePersons;\nexport default ViewProtectionSchedulePersons;\nvar _c;\n$RefreshReg$(_c, \"ViewProtectionSchedulePersons\");","map":{"version":3,"names":["React","Table","jsxDEV","_jsxDEV","ViewProtectionSchedulePersons","protection_schedule","students_list_for_schedule","formatDate","dateString","parts","match","length","year","month","parseInt","day","months","getFullName","studentData","student","last_name","first_name","patronymic","distributeStudentsByProtectionDays","schedule","groupedSchedule","addedStudents","forEach","item","index","group","dateKey","date","groupName","name","groupId","id","nextDay","getNextDay","isNextDayStudent","students","filter","fullName","existingStudent","find","s","push","limitStudentsPerDay","Object","entries","groups","firstDayStudents","slice","secondDayStudents","Date","setDate","getDate","toLocaleDateString","limitedSchedule","children","map","fileName","_jsxFileName","lineNumber","columnNumber","bordered","hover","_c","$RefreshReg$"],"sources":["C:/Users/79131/OneDrive/Рабочий стол/хлам/react project/client/src/components/ProtectionSchedule/ViewProtectionSchedulePersons.js"],"sourcesContent":["import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nconst ViewProtectionSchedulePersons = ({ protection_schedule, students_list_for_schedule }) => {\r\n    const formatDate = (dateString) => {\r\n        const parts = dateString.match(/(\\d{2})(\\d{2})(\\d{4})/);\r\n        if (parts && parts.length === 4) {\r\n            const year = parts[3];\r\n            const month = parseInt(parts[2], 10);\r\n            const day = parseInt(parts[1], 10);\r\n            const months = [\r\n                'января', 'февраля', 'марта', 'апреля', 'мая', 'июня',\r\n                'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'\r\n            ];\r\n            return `${day} ${months[month - 1]} ${year}`;\r\n        } else {\r\n            return 'Invalid Date';\r\n        }\r\n    };\r\n\r\n    const getFullName = (studentData) => {\r\n        if (studentData && studentData.student) {\r\n            const { last_name, first_name, patronymic } = studentData.student;\r\n            return `${last_name} ${first_name} ${patronymic}`;\r\n        } else {\r\n            return 'Unknown';\r\n        }\r\n    };\r\n\r\n    const distributeStudentsByProtectionDays = (schedule) => {\r\n        const groupedSchedule = {};\r\n        const addedStudents = [];\r\n    \r\n        schedule.forEach((item, index) => {\r\n            if (!item.group) return;\r\n            const dateKey = formatDate(item.date);\r\n            const groupName = item.group ? item.group.name : '';\r\n            const groupId = item.group ? item.group.id : '';\r\n    \r\n            // Проверяем, нужно ли добавить студента на следующий день\r\n            const nextDay = getNextDay(dateKey);\r\n            const isNextDayStudent = schedule[index + 1] && formatDate(schedule[index + 1].date) === nextDay;\r\n    \r\n            if (!groupedSchedule[dateKey]) {\r\n                groupedSchedule[dateKey] = {};\r\n            }\r\n            if (!groupedSchedule[dateKey][groupName]) {\r\n                groupedSchedule[dateKey][groupName] = [];\r\n            }\r\n    \r\n            const students = students_list_for_schedule.filter(student => student.student.group.id === groupId);\r\n            students.forEach(student => {\r\n                const fullName = getFullName(student);\r\n                const existingStudent = addedStudents.find(s => s === fullName);\r\n                if (!existingStudent || isNextDayStudent) {\r\n                    // Добавляем студента в текущий день, если он не добавлен ранее или если он добавляется на следующий день\r\n                    groupedSchedule[dateKey][groupName].push({ fullName, group: groupName, date: isNextDayStudent ? nextDay : formatDate(item.date) });\r\n                    addedStudents.push(fullName);\r\n                }\r\n            });\r\n        });\r\n    \r\n        return groupedSchedule;\r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    const limitStudentsPerDay = (schedule) => {\r\n        Object.entries(schedule).forEach(([date, groups]) => {\r\n            Object.entries(groups).forEach(([group, students]) => {\r\n                if (students.length > 12) {\r\n                    // Оставляем только первых 12 студентов\r\n                    const firstDayStudents = students.slice(0, 12);\r\n                    const secondDayStudents = students.slice(12);\r\n                    schedule[date][group] = firstDayStudents;\r\n                    const nextDay = getNextDay(date);\r\n                    if (!schedule[nextDay]) {\r\n                        schedule[nextDay] = {};\r\n                    }\r\n                    schedule[nextDay][group] = secondDayStudents;\r\n                }\r\n            });\r\n        });\r\n        return schedule;\r\n    };\r\n\r\n    const getNextDay = (dateString) => {\r\n        const date = new Date(dateString);\r\n        date.setDate(date.getDate() + 1);\r\n        return formatDate(date.toLocaleDateString());\r\n    };\r\n\r\n    const groupedSchedule = distributeStudentsByProtectionDays(protection_schedule);\r\n    const limitedSchedule = limitStudentsPerDay(groupedSchedule);\r\n\r\n    return (\r\n        <div>\r\n            {Object.entries(limitedSchedule).map(([date, groups]) => (\r\n                <div key={date}>\r\n                    <h3>{date}</h3>\r\n                    {Object.entries(groups).map(([group, students]) => (\r\n                        <Table bordered hover key={group}>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ФИО</th>\r\n                                    <th>Группа</th>\r\n                                    <th>Дата</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {students.map((student, index) => (\r\n                                    <tr key={index}>\r\n                                        <td>{student.fullName}</td>\r\n                                        <td>{student.group}</td>\r\n                                        <td>{student.date}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewProtectionSchedulePersons;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}