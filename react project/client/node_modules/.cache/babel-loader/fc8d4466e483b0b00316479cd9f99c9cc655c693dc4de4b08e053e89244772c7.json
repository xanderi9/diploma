{"ast":null,"code":"import petrovich from 'petrovich';\nimport RussianNouns from 'russian-nouns-js';\nimport { saveAs } from 'file-saver';\nimport PizZip from 'pizzip';\nimport Docxtemplater from 'docxtemplater';\nimport word from './protocol.docx';\nconst generateProtocolsFunction = async ({\n  composition_of_sec,\n  selectedGroup,\n  groupData\n}) => {\n  const chairman = composition_of_sec.find(comp => comp.chairman_of_SEC === true);\n  const members_list = composition_of_sec.filter(sec => sec.chairman_of_SEC === false);\n  const getInitials = (firstName, patronymic) => {\n    return `${firstName.charAt(0)}.${patronymic.charAt(0)}.`;\n  };\n  const np = getInitials(chairman.user.first_name, chairman.user.patronymic);\n  try {\n    const response = await fetch(word);\n    if (!response.ok) throw new Error('Ошибка сети');\n    const arrayBuffer = await response.arrayBuffer();\n    for (const item of groupData) {\n      const {\n        request,\n        work_protection\n      } = item;\n      const student = request.student;\n      const teacher = request.teacher;\n      const [hours_start, min_start] = work_protection.time.split(':');\n      const [hours_end, min_end] = ['xx', 'xx']; // Время окончания нужно определить, исходя из контекста\n\n      const dataToRender = {\n        protocol_number: work_protection.protocol_number,\n        group_protection_date: new Date(work_protection.date).toLocaleDateString('ru-RU'),\n        hours_start: hours_start,\n        min_start: min_start,\n        hours_end: hours_end,\n        min_end: min_end,\n        chairman_last_name: chairman.user.last_name,\n        chairman_np: np,\n        chairman_degree: chairman.employee_information.academic_degree,\n        chairman_job_title: chairman.employee_information.job_title,\n        members_list: members_list.map(member => ({\n          members_last_name: member.user.last_name,\n          members_np: getInitials(member.user.first_name, member.user.patronymic),\n          members_degree: member.employee_information.academic_degree || '',\n          members_job_title: member.employee_information.job_title,\n          members_place_of_work: member.employee_information.place_of_work\n        })),\n        student_fullname: `${student.user.first_name} ${student.user.last_name}`,\n        specialityCode: student.group.speciality.code,\n        specialtityProgram: student.group.speciality.name,\n        theme: request.theme_str,\n        teacher_first_name: teacher.user.first_name,\n        teacher_np: getInitials(teacher.user.first_name, teacher.user.patronymic),\n        teacher_degree: teacher.employee_information.academic_degree,\n        teacher_job_title: teacher.employee_information.job_title,\n        reviewer_first_name: '',\n        reviewer_np: '',\n        reviewer_degree: '',\n        reviewer_job_title: '',\n        student_last_name: student.user.last_name,\n        student_np: getInitials(student.user.first_name, student.user.patronymic),\n        duration: 15\n      };\n\n      // Создаем новую инстанцию Docxtemplater для каждого студента\n      const zip = new PizZip(arrayBuffer);\n      const doc = new Docxtemplater(zip);\n      doc.setData(dataToRender);\n      doc.render();\n      const output = doc.getZip().generate({\n        type: 'blob'\n      });\n      saveAs(output, `Протокол_${student.user.last_name}_${student.user.first_name}.docx`);\n    }\n  } catch (error) {\n    console.error('Ошибка загрузки файла:', error);\n  }\n};\nexport default generateProtocolsFunction;","map":{"version":3,"names":["petrovich","RussianNouns","saveAs","PizZip","Docxtemplater","word","generateProtocolsFunction","composition_of_sec","selectedGroup","groupData","chairman","find","comp","chairman_of_SEC","members_list","filter","sec","getInitials","firstName","patronymic","charAt","np","user","first_name","response","fetch","ok","Error","arrayBuffer","item","request","work_protection","student","teacher","hours_start","min_start","time","split","hours_end","min_end","dataToRender","protocol_number","group_protection_date","Date","date","toLocaleDateString","chairman_last_name","last_name","chairman_np","chairman_degree","employee_information","academic_degree","chairman_job_title","job_title","map","member","members_last_name","members_np","members_degree","members_job_title","members_place_of_work","place_of_work","student_fullname","specialityCode","group","speciality","code","specialtityProgram","name","theme","theme_str","teacher_first_name","teacher_np","teacher_degree","teacher_job_title","reviewer_first_name","reviewer_np","reviewer_degree","reviewer_job_title","student_last_name","student_np","duration","zip","doc","setData","render","output","getZip","generate","type","error","console"],"sources":["C:/Users/79131/OneDrive/Рабочий стол/хлам/react project/client/src/components/Forms/GenerateProtocols/GenerateProtocolFunction.js"],"sourcesContent":["import petrovich from 'petrovich';\r\nimport RussianNouns from 'russian-nouns-js';\r\nimport { saveAs } from 'file-saver';\r\nimport PizZip from 'pizzip';\r\nimport Docxtemplater from 'docxtemplater';\r\nimport word from './protocol.docx';\r\n\r\nconst generateProtocolsFunction = async ({ \r\n    composition_of_sec, \r\n    selectedGroup,\r\n    groupData\r\n}) => {\r\n    const chairman = composition_of_sec.find(comp => comp.chairman_of_SEC === true);\r\n    const members_list = composition_of_sec.filter(sec => sec.chairman_of_SEC === false);\r\n\r\n    const getInitials = (firstName, patronymic) => {\r\n        return `${firstName.charAt(0)}.${patronymic.charAt(0)}.`;\r\n    };\r\n\r\n    const np = getInitials(chairman.user.first_name, chairman.user.patronymic);\r\n\r\n    try {\r\n        const response = await fetch(word);\r\n        if (!response.ok) throw new Error('Ошибка сети');\r\n        const arrayBuffer = await response.arrayBuffer();\r\n\r\n        for (const item of groupData) {\r\n            const { request, work_protection } = item;\r\n            const student = request.student;\r\n            const teacher = request.teacher;\r\n\r\n            const [hours_start, min_start] = work_protection.time.split(':');\r\n            const [hours_end, min_end] = ['xx', 'xx']; // Время окончания нужно определить, исходя из контекста\r\n\r\n            const dataToRender = {\r\n                protocol_number: work_protection.protocol_number,\r\n                group_protection_date: new Date(work_protection.date).toLocaleDateString('ru-RU'),\r\n                hours_start: hours_start,\r\n                min_start: min_start,\r\n                hours_end: hours_end,\r\n                min_end: min_end,\r\n                chairman_last_name: chairman.user.last_name,\r\n                chairman_np: np,\r\n                chairman_degree: chairman.employee_information.academic_degree,\r\n                chairman_job_title: chairman.employee_information.job_title,\r\n                members_list: members_list.map(member => ({\r\n                    members_last_name: member.user.last_name,\r\n                    members_np: getInitials(member.user.first_name, member.user.patronymic),\r\n                    members_degree: member.employee_information.academic_degree || '',\r\n                    members_job_title: member.employee_information.job_title,\r\n                    members_place_of_work: member.employee_information.place_of_work,\r\n                })),\r\n                student_fullname: `${student.user.first_name} ${student.user.last_name}`,\r\n                specialityCode: student.group.speciality.code,\r\n                specialtityProgram: student.group.speciality.name,\r\n                theme: request.theme_str,\r\n                teacher_first_name: teacher.user.first_name,\r\n                teacher_np: getInitials(teacher.user.first_name, teacher.user.patronymic),\r\n                teacher_degree: teacher.employee_information.academic_degree,\r\n                teacher_job_title: teacher.employee_information.job_title,\r\n                reviewer_first_name: '', \r\n                reviewer_np: '',\r\n                reviewer_degree: '', \r\n                reviewer_job_title: '', \r\n                student_last_name: student.user.last_name,\r\n                student_np: getInitials(student.user.first_name, student.user.patronymic),\r\n                duration: 15, \r\n            };\r\n\r\n            // Создаем новую инстанцию Docxtemplater для каждого студента\r\n            const zip = new PizZip(arrayBuffer);\r\n            const doc = new Docxtemplater(zip);\r\n            \r\n            doc.setData(dataToRender);\r\n            doc.render();\r\n\r\n            const output = doc.getZip().generate({ type: 'blob' });\r\n            saveAs(output, `Протокол_${student.user.last_name}_${student.user.first_name}.docx`);\r\n        }\r\n    } catch (error) {\r\n        console.error('Ошибка загрузки файла:', error);\r\n    }\r\n};\r\n\r\nexport default generateProtocolsFunction;\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,SAASC,MAAM,QAAQ,YAAY;AACnC,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,aAAa,MAAM,eAAe;AACzC,OAAOC,IAAI,MAAM,iBAAiB;AAElC,MAAMC,yBAAyB,GAAG,MAAAA,CAAO;EACrCC,kBAAkB;EAClBC,aAAa;EACbC;AACJ,CAAC,KAAK;EACF,MAAMC,QAAQ,GAAGH,kBAAkB,CAACI,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,eAAe,KAAK,IAAI,CAAC;EAC/E,MAAMC,YAAY,GAAGP,kBAAkB,CAACQ,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACH,eAAe,KAAK,KAAK,CAAC;EAEpF,MAAMI,WAAW,GAAGA,CAACC,SAAS,EAAEC,UAAU,KAAK;IAC3C,OAAQ,GAAED,SAAS,CAACE,MAAM,CAAC,CAAC,CAAE,IAAGD,UAAU,CAACC,MAAM,CAAC,CAAC,CAAE,GAAE;EAC5D,CAAC;EAED,MAAMC,EAAE,GAAGJ,WAAW,CAACP,QAAQ,CAACY,IAAI,CAACC,UAAU,EAAEb,QAAQ,CAACY,IAAI,CAACH,UAAU,CAAC;EAE1E,IAAI;IACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACpB,IAAI,CAAC;IAClC,IAAI,CAACmB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;IAChD,MAAMC,WAAW,GAAG,MAAMJ,QAAQ,CAACI,WAAW,CAAC,CAAC;IAEhD,KAAK,MAAMC,IAAI,IAAIpB,SAAS,EAAE;MAC1B,MAAM;QAAEqB,OAAO;QAAEC;MAAgB,CAAC,GAAGF,IAAI;MACzC,MAAMG,OAAO,GAAGF,OAAO,CAACE,OAAO;MAC/B,MAAMC,OAAO,GAAGH,OAAO,CAACG,OAAO;MAE/B,MAAM,CAACC,WAAW,EAAEC,SAAS,CAAC,GAAGJ,eAAe,CAACK,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;MAChE,MAAM,CAACC,SAAS,EAAEC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;;MAE3C,MAAMC,YAAY,GAAG;QACjBC,eAAe,EAAEV,eAAe,CAACU,eAAe;QAChDC,qBAAqB,EAAE,IAAIC,IAAI,CAACZ,eAAe,CAACa,IAAI,CAAC,CAACC,kBAAkB,CAAC,OAAO,CAAC;QACjFX,WAAW,EAAEA,WAAW;QACxBC,SAAS,EAAEA,SAAS;QACpBG,SAAS,EAAEA,SAAS;QACpBC,OAAO,EAAEA,OAAO;QAChBO,kBAAkB,EAAEpC,QAAQ,CAACY,IAAI,CAACyB,SAAS;QAC3CC,WAAW,EAAE3B,EAAE;QACf4B,eAAe,EAAEvC,QAAQ,CAACwC,oBAAoB,CAACC,eAAe;QAC9DC,kBAAkB,EAAE1C,QAAQ,CAACwC,oBAAoB,CAACG,SAAS;QAC3DvC,YAAY,EAAEA,YAAY,CAACwC,GAAG,CAACC,MAAM,KAAK;UACtCC,iBAAiB,EAAED,MAAM,CAACjC,IAAI,CAACyB,SAAS;UACxCU,UAAU,EAAExC,WAAW,CAACsC,MAAM,CAACjC,IAAI,CAACC,UAAU,EAAEgC,MAAM,CAACjC,IAAI,CAACH,UAAU,CAAC;UACvEuC,cAAc,EAAEH,MAAM,CAACL,oBAAoB,CAACC,eAAe,IAAI,EAAE;UACjEQ,iBAAiB,EAAEJ,MAAM,CAACL,oBAAoB,CAACG,SAAS;UACxDO,qBAAqB,EAAEL,MAAM,CAACL,oBAAoB,CAACW;QACvD,CAAC,CAAC,CAAC;QACHC,gBAAgB,EAAG,GAAE9B,OAAO,CAACV,IAAI,CAACC,UAAW,IAAGS,OAAO,CAACV,IAAI,CAACyB,SAAU,EAAC;QACxEgB,cAAc,EAAE/B,OAAO,CAACgC,KAAK,CAACC,UAAU,CAACC,IAAI;QAC7CC,kBAAkB,EAAEnC,OAAO,CAACgC,KAAK,CAACC,UAAU,CAACG,IAAI;QACjDC,KAAK,EAAEvC,OAAO,CAACwC,SAAS;QACxBC,kBAAkB,EAAEtC,OAAO,CAACX,IAAI,CAACC,UAAU;QAC3CiD,UAAU,EAAEvD,WAAW,CAACgB,OAAO,CAACX,IAAI,CAACC,UAAU,EAAEU,OAAO,CAACX,IAAI,CAACH,UAAU,CAAC;QACzEsD,cAAc,EAAExC,OAAO,CAACiB,oBAAoB,CAACC,eAAe;QAC5DuB,iBAAiB,EAAEzC,OAAO,CAACiB,oBAAoB,CAACG,SAAS;QACzDsB,mBAAmB,EAAE,EAAE;QACvBC,WAAW,EAAE,EAAE;QACfC,eAAe,EAAE,EAAE;QACnBC,kBAAkB,EAAE,EAAE;QACtBC,iBAAiB,EAAE/C,OAAO,CAACV,IAAI,CAACyB,SAAS;QACzCiC,UAAU,EAAE/D,WAAW,CAACe,OAAO,CAACV,IAAI,CAACC,UAAU,EAAES,OAAO,CAACV,IAAI,CAACH,UAAU,CAAC;QACzE8D,QAAQ,EAAE;MACd,CAAC;;MAED;MACA,MAAMC,GAAG,GAAG,IAAI/E,MAAM,CAACyB,WAAW,CAAC;MACnC,MAAMuD,GAAG,GAAG,IAAI/E,aAAa,CAAC8E,GAAG,CAAC;MAElCC,GAAG,CAACC,OAAO,CAAC5C,YAAY,CAAC;MACzB2C,GAAG,CAACE,MAAM,CAAC,CAAC;MAEZ,MAAMC,MAAM,GAAGH,GAAG,CAACI,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC;QAAEC,IAAI,EAAE;MAAO,CAAC,CAAC;MACtDvF,MAAM,CAACoF,MAAM,EAAG,YAAWtD,OAAO,CAACV,IAAI,CAACyB,SAAU,IAAGf,OAAO,CAACV,IAAI,CAACC,UAAW,OAAM,CAAC;IACxF;EACJ,CAAC,CAAC,OAAOmE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAClD;AACJ,CAAC;AAED,eAAepF,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}