{"ast":null,"code":"import petrovich from 'petrovich';\nimport RussianNouns from 'russian-nouns-js';\nimport { saveAs } from 'file-saver';\nimport PizZip from 'pizzip';\nimport Docxtemplater from 'docxtemplater';\nimport word from './protocol.docx';\nconst GenerateProtocolsKvalif = async ({\n  composition_of_sec,\n  selectedGroup,\n  groupData,\n  data\n}) => {\n  const chairman = composition_of_sec.find(comp => comp.chairman_of_SEC === true);\n  const members_list = composition_of_sec.filter(sec => sec.chairman_of_SEC === false);\n  const getInitials = (firstName, patronymic) => {\n    return `${firstName.charAt(0)}.${patronymic.charAt(0)}.`;\n  };\n  const np = getInitials(chairman.user.first_name, chairman.user.patronymic);\n  try {\n    const response = await fetch(word);\n    if (!response.ok) throw new Error('Ошибка сети');\n    const arrayBuffer = await response.arrayBuffer();\n    for (const item of groupData) {\n      const {\n        request,\n        work_protection\n      } = item;\n      const student = request.student;\n      const teacher = request.teacher;\n      const theme = request.theme;\n      const [hours_start, min_start] = work_protection.time.split(':');\n      const full_name_student = {\n        last: student.user.last_name,\n        first: student.user.first_name,\n        middle: student.user.patronymic\n      };\n      let fullnameStudent = petrovich(full_name_student, 'accusative');\n      let fullnameStudentGen = petrovich(full_name_student, 'genitive');\n      fullnameStudent = `${fullnameStudent.last} ${fullnameStudent.first} ${fullnameStudent.middle}`;\n      // Вычисляем время окончания: добавляем 20 минут к времени начала\n      const startTime = new Date();\n      startTime.setHours(hours_start);\n      startTime.setMinutes(min_start);\n      startTime.setMinutes(startTime.getMinutes() + 20);\n      const hours_end = startTime.getHours();\n      const min_end = startTime.getMinutes();\n      const dataToRender = {\n        protocol_number: work_protection.protocol_number,\n        group_protection_date: new Date(work_protection.date).toLocaleDateString('ru-RU'),\n        chairman_last_name: chairman.user.last_name,\n        chairman_np: np,\n        chairman_degree: chairman.employee_information.academic_degree,\n        chairman_job_title: chairman.employee_information.job_title,\n        members_list: members_list.map(member => ({\n          members_last_name: member.user.last_name,\n          members_np: getInitials(member.user.first_name, member.user.patronymic),\n          members_degree: member.employee_information.academic_degree || '',\n          members_job_title: member.employee_information.job_title,\n          members_place_of_work: member.employee_information.place_of_work\n        })),\n        student_fullname: fullnameStudent,\n        specialityCode: student.group.speciality.code,\n        specialtityProgram: student.group.speciality.name,\n        theme: request.theme_str,\n        teacher_last_name: teacher.user.last_name,\n        teacher_np: getInitials(teacher.user.first_name, teacher.user.patronymic),\n        teacher_degree: teacher.employee_information.academic_degree,\n        teacher_job_title: teacher.employee_information.job_title,\n        student_last_name: student.user.last_name,\n        student_np: getInitials(student.user.first_name, student.user.patronymic),\n        secretary_last_name: data.user.last_name,\n        secretary_np: getInitials(data.user.first_name, data.user.patronymic),\n        duration: 20\n      };\n\n      // Создаем новую инстанцию Docxtemplater для каждого студента\n      const zip = new PizZip(arrayBuffer);\n      const doc = new Docxtemplater(zip);\n      doc.setData(dataToRender);\n      doc.render();\n      const output = doc.getZip().generate({\n        type: 'blob'\n      });\n      saveAs(output, `Протокол_${student.user.last_name}_${student.user.first_name}.docx`);\n    }\n  } catch (error) {\n    console.error('Ошибка загрузки файла:', error);\n  }\n};\n_c = GenerateProtocolsKvalif;\nexport default GenerateProtocolsKvalif;\nvar _c;\n$RefreshReg$(_c, \"GenerateProtocolsKvalif\");","map":{"version":3,"names":["petrovich","RussianNouns","saveAs","PizZip","Docxtemplater","word","GenerateProtocolsKvalif","composition_of_sec","selectedGroup","groupData","data","chairman","find","comp","chairman_of_SEC","members_list","filter","sec","getInitials","firstName","patronymic","charAt","np","user","first_name","response","fetch","ok","Error","arrayBuffer","item","request","work_protection","student","teacher","theme","hours_start","min_start","time","split","full_name_student","last","last_name","first","middle","fullnameStudent","fullnameStudentGen","startTime","Date","setHours","setMinutes","getMinutes","hours_end","getHours","min_end","dataToRender","protocol_number","group_protection_date","date","toLocaleDateString","chairman_last_name","chairman_np","chairman_degree","employee_information","academic_degree","chairman_job_title","job_title","map","member","members_last_name","members_np","members_degree","members_job_title","members_place_of_work","place_of_work","student_fullname","specialityCode","group","speciality","code","specialtityProgram","name","theme_str","teacher_last_name","teacher_np","teacher_degree","teacher_job_title","student_last_name","student_np","secretary_last_name","secretary_np","duration","zip","doc","setData","render","output","getZip","generate","type","error","console","_c","$RefreshReg$"],"sources":["C:/Users/79131/OneDrive/Рабочий стол/хлам/react project/client/src/components/Forms/GenerateProtocols/GenerateProtocolsKvalif.js"],"sourcesContent":["import petrovich from 'petrovich';\r\nimport RussianNouns from 'russian-nouns-js';\r\nimport { saveAs } from 'file-saver';\r\nimport PizZip from 'pizzip';\r\nimport Docxtemplater from 'docxtemplater';\r\nimport word from './protocol.docx';\r\n\r\nconst GenerateProtocolsKvalif = async ({ \r\n    composition_of_sec, \r\n    selectedGroup,\r\n    groupData,\r\n    data\r\n}) => {\r\n    const chairman = composition_of_sec.find(comp => comp.chairman_of_SEC === true);\r\n    const members_list = composition_of_sec.filter(sec => sec.chairman_of_SEC === false);\r\n\r\n    const getInitials = (firstName, patronymic) => {\r\n        return `${firstName.charAt(0)}.${patronymic.charAt(0)}.`;\r\n    };\r\n\r\n    const np = getInitials(chairman.user.first_name, chairman.user.patronymic);\r\n   \r\n\r\n    try {\r\n        const response = await fetch(word);\r\n        if (!response.ok) throw new Error('Ошибка сети');\r\n        const arrayBuffer = await response.arrayBuffer();\r\n\r\n        for (const item of groupData) {\r\n            const { request, work_protection } = item;\r\n            const student = request.student;\r\n            const teacher = request.teacher;\r\n            const theme = request.theme;\r\n            const [hours_start, min_start] = work_protection.time.split(':');\r\n            const full_name_student = {\r\n                last: student.user.last_name,\r\n                first: student.user.first_name,\r\n                middle: student.user.patronymic,\r\n              };\r\n              let fullnameStudent = petrovich(full_name_student, 'accusative');\r\n              let fullnameStudentGen = petrovich(full_name_student, 'genitive');\r\n              fullnameStudent = `${fullnameStudent.last} ${fullnameStudent.first} ${fullnameStudent.middle}`;\r\n            // Вычисляем время окончания: добавляем 20 минут к времени начала\r\n            const startTime = new Date();\r\n            startTime.setHours(hours_start);\r\n            startTime.setMinutes(min_start);\r\n            startTime.setMinutes(startTime.getMinutes() + 20);\r\n\r\n            const hours_end = startTime.getHours();\r\n            const min_end = startTime.getMinutes();\r\n\r\n            const dataToRender = {\r\n                protocol_number: work_protection.protocol_number,\r\n                group_protection_date: new Date(work_protection.date).toLocaleDateString('ru-RU'),\r\n                chairman_last_name: chairman.user.last_name,\r\n                chairman_np: np,\r\n                chairman_degree: chairman.employee_information.academic_degree,\r\n                chairman_job_title: chairman.employee_information.job_title,\r\n                members_list: members_list.map(member => ({\r\n                    members_last_name: member.user.last_name,\r\n                    members_np: getInitials(member.user.first_name, member.user.patronymic),\r\n                    members_degree: member.employee_information.academic_degree || '',\r\n                    members_job_title: member.employee_information.job_title,\r\n                    members_place_of_work: member.employee_information.place_of_work,\r\n                })),\r\n                student_fullname: fullnameStudent,\r\n                specialityCode: student.group.speciality.code,\r\n                specialtityProgram: student.group.speciality.name,\r\n                theme: request.theme_str,\r\n                teacher_last_name: teacher.user.last_name,\r\n                teacher_np: getInitials(teacher.user.first_name, teacher.user.patronymic),\r\n                teacher_degree: teacher.employee_information.academic_degree,\r\n                teacher_job_title: teacher.employee_information.job_title,\r\n                student_last_name: student.user.last_name,\r\n                student_np: getInitials(student.user.first_name, student.user.patronymic),\r\n                secretary_last_name: data.user.last_name,\r\n                secretary_np: getInitials(data.user.first_name, data.user.patronymic),\r\n                duration: 20, \r\n            };\r\n\r\n            // Создаем новую инстанцию Docxtemplater для каждого студента\r\n            const zip = new PizZip(arrayBuffer);\r\n            const doc = new Docxtemplater(zip);\r\n            \r\n            doc.setData(dataToRender);\r\n            doc.render();\r\n\r\n            const output = doc.getZip().generate({ type: 'blob' });\r\n            saveAs(output, `Протокол_${student.user.last_name}_${student.user.first_name}.docx`);\r\n        }\r\n    } catch (error) {\r\n        console.error('Ошибка загрузки файла:', error);\r\n    }\r\n};\r\n\r\nexport default GenerateProtocolsKvalif;\r\n\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,SAASC,MAAM,QAAQ,YAAY;AACnC,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,aAAa,MAAM,eAAe;AACzC,OAAOC,IAAI,MAAM,iBAAiB;AAElC,MAAMC,uBAAuB,GAAG,MAAAA,CAAO;EACnCC,kBAAkB;EAClBC,aAAa;EACbC,SAAS;EACTC;AACJ,CAAC,KAAK;EACF,MAAMC,QAAQ,GAAGJ,kBAAkB,CAACK,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,eAAe,KAAK,IAAI,CAAC;EAC/E,MAAMC,YAAY,GAAGR,kBAAkB,CAACS,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACH,eAAe,KAAK,KAAK,CAAC;EAEpF,MAAMI,WAAW,GAAGA,CAACC,SAAS,EAAEC,UAAU,KAAK;IAC3C,OAAQ,GAAED,SAAS,CAACE,MAAM,CAAC,CAAC,CAAE,IAAGD,UAAU,CAACC,MAAM,CAAC,CAAC,CAAE,GAAE;EAC5D,CAAC;EAED,MAAMC,EAAE,GAAGJ,WAAW,CAACP,QAAQ,CAACY,IAAI,CAACC,UAAU,EAAEb,QAAQ,CAACY,IAAI,CAACH,UAAU,CAAC;EAG1E,IAAI;IACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACrB,IAAI,CAAC;IAClC,IAAI,CAACoB,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;IAChD,MAAMC,WAAW,GAAG,MAAMJ,QAAQ,CAACI,WAAW,CAAC,CAAC;IAEhD,KAAK,MAAMC,IAAI,IAAIrB,SAAS,EAAE;MAC1B,MAAM;QAAEsB,OAAO;QAAEC;MAAgB,CAAC,GAAGF,IAAI;MACzC,MAAMG,OAAO,GAAGF,OAAO,CAACE,OAAO;MAC/B,MAAMC,OAAO,GAAGH,OAAO,CAACG,OAAO;MAC/B,MAAMC,KAAK,GAAGJ,OAAO,CAACI,KAAK;MAC3B,MAAM,CAACC,WAAW,EAAEC,SAAS,CAAC,GAAGL,eAAe,CAACM,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;MAChE,MAAMC,iBAAiB,GAAG;QACtBC,IAAI,EAAER,OAAO,CAACV,IAAI,CAACmB,SAAS;QAC5BC,KAAK,EAAEV,OAAO,CAACV,IAAI,CAACC,UAAU;QAC9BoB,MAAM,EAAEX,OAAO,CAACV,IAAI,CAACH;MACvB,CAAC;MACD,IAAIyB,eAAe,GAAG7C,SAAS,CAACwC,iBAAiB,EAAE,YAAY,CAAC;MAChE,IAAIM,kBAAkB,GAAG9C,SAAS,CAACwC,iBAAiB,EAAE,UAAU,CAAC;MACjEK,eAAe,GAAI,GAAEA,eAAe,CAACJ,IAAK,IAAGI,eAAe,CAACF,KAAM,IAAGE,eAAe,CAACD,MAAO,EAAC;MAChG;MACA,MAAMG,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;MAC5BD,SAAS,CAACE,QAAQ,CAACb,WAAW,CAAC;MAC/BW,SAAS,CAACG,UAAU,CAACb,SAAS,CAAC;MAC/BU,SAAS,CAACG,UAAU,CAACH,SAAS,CAACI,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC;MAEjD,MAAMC,SAAS,GAAGL,SAAS,CAACM,QAAQ,CAAC,CAAC;MACtC,MAAMC,OAAO,GAAGP,SAAS,CAACI,UAAU,CAAC,CAAC;MAEtC,MAAMI,YAAY,GAAG;QACjBC,eAAe,EAAExB,eAAe,CAACwB,eAAe;QAChDC,qBAAqB,EAAE,IAAIT,IAAI,CAAChB,eAAe,CAAC0B,IAAI,CAAC,CAACC,kBAAkB,CAAC,OAAO,CAAC;QACjFC,kBAAkB,EAAEjD,QAAQ,CAACY,IAAI,CAACmB,SAAS;QAC3CmB,WAAW,EAAEvC,EAAE;QACfwC,eAAe,EAAEnD,QAAQ,CAACoD,oBAAoB,CAACC,eAAe;QAC9DC,kBAAkB,EAAEtD,QAAQ,CAACoD,oBAAoB,CAACG,SAAS;QAC3DnD,YAAY,EAAEA,YAAY,CAACoD,GAAG,CAACC,MAAM,KAAK;UACtCC,iBAAiB,EAAED,MAAM,CAAC7C,IAAI,CAACmB,SAAS;UACxC4B,UAAU,EAAEpD,WAAW,CAACkD,MAAM,CAAC7C,IAAI,CAACC,UAAU,EAAE4C,MAAM,CAAC7C,IAAI,CAACH,UAAU,CAAC;UACvEmD,cAAc,EAAEH,MAAM,CAACL,oBAAoB,CAACC,eAAe,IAAI,EAAE;UACjEQ,iBAAiB,EAAEJ,MAAM,CAACL,oBAAoB,CAACG,SAAS;UACxDO,qBAAqB,EAAEL,MAAM,CAACL,oBAAoB,CAACW;QACvD,CAAC,CAAC,CAAC;QACHC,gBAAgB,EAAE9B,eAAe;QACjC+B,cAAc,EAAE3C,OAAO,CAAC4C,KAAK,CAACC,UAAU,CAACC,IAAI;QAC7CC,kBAAkB,EAAE/C,OAAO,CAAC4C,KAAK,CAACC,UAAU,CAACG,IAAI;QACjD9C,KAAK,EAAEJ,OAAO,CAACmD,SAAS;QACxBC,iBAAiB,EAAEjD,OAAO,CAACX,IAAI,CAACmB,SAAS;QACzC0C,UAAU,EAAElE,WAAW,CAACgB,OAAO,CAACX,IAAI,CAACC,UAAU,EAAEU,OAAO,CAACX,IAAI,CAACH,UAAU,CAAC;QACzEiE,cAAc,EAAEnD,OAAO,CAAC6B,oBAAoB,CAACC,eAAe;QAC5DsB,iBAAiB,EAAEpD,OAAO,CAAC6B,oBAAoB,CAACG,SAAS;QACzDqB,iBAAiB,EAAEtD,OAAO,CAACV,IAAI,CAACmB,SAAS;QACzC8C,UAAU,EAAEtE,WAAW,CAACe,OAAO,CAACV,IAAI,CAACC,UAAU,EAAES,OAAO,CAACV,IAAI,CAACH,UAAU,CAAC;QACzEqE,mBAAmB,EAAE/E,IAAI,CAACa,IAAI,CAACmB,SAAS;QACxCgD,YAAY,EAAExE,WAAW,CAACR,IAAI,CAACa,IAAI,CAACC,UAAU,EAAEd,IAAI,CAACa,IAAI,CAACH,UAAU,CAAC;QACrEuE,QAAQ,EAAE;MACd,CAAC;;MAED;MACA,MAAMC,GAAG,GAAG,IAAIzF,MAAM,CAAC0B,WAAW,CAAC;MACnC,MAAMgE,GAAG,GAAG,IAAIzF,aAAa,CAACwF,GAAG,CAAC;MAElCC,GAAG,CAACC,OAAO,CAACvC,YAAY,CAAC;MACzBsC,GAAG,CAACE,MAAM,CAAC,CAAC;MAEZ,MAAMC,MAAM,GAAGH,GAAG,CAACI,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC;QAAEC,IAAI,EAAE;MAAO,CAAC,CAAC;MACtDjG,MAAM,CAAC8F,MAAM,EAAG,YAAW/D,OAAO,CAACV,IAAI,CAACmB,SAAU,IAAGT,OAAO,CAACV,IAAI,CAACC,UAAW,OAAM,CAAC;IACxF;EACJ,CAAC,CAAC,OAAO4E,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAClD;AACJ,CAAC;AAACE,EAAA,GAtFIhG,uBAAuB;AAwF7B,eAAeA,uBAAuB;AAAC,IAAAgG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}