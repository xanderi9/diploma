{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\79131\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\\\u0445\\u043B\\u0430\\u043C\\\\react project\\\\client\\\\src\\\\components\\\\ProtectionSchedule\\\\ViewProtectionSchedulePersons.js\";\nimport React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst distributeStudentsByProtectionDays = schedule => {\n  const formatDate = date => {\n    const options = {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    };\n    return date.toLocaleDateString('ru-RU', options);\n  };\n  const getFullName = studentData => {\n    if (studentData && studentData.student) {\n      const {\n        last_name,\n        first_name,\n        patronymic\n      } = studentData.student;\n      return `${last_name} ${first_name} ${patronymic}`;\n    } else {\n      return 'Unknown';\n    }\n  };\n  const groupedSchedule = {};\n  schedule.forEach((item, index) => {\n    if (!item.group) return;\n    const dateKey = formatDate(item.date);\n    const groupName = item.group ? item.group.name : '';\n    const groupId = item.group ? item.group.id : '';\n    if (!groupedSchedule[dateKey]) {\n      groupedSchedule[dateKey] = {};\n    }\n    if (!groupedSchedule[dateKey][groupName]) {\n      groupedSchedule[dateKey][groupName] = [];\n    }\n    const students = students_list_for_schedule.filter(student => student.student.group.id === groupId);\n    students.forEach(student => {\n      const fullName = getFullName(student);\n      const existingStudent = groupedSchedule[dateKey][groupName].find(s => s.fullName === fullName);\n      if (!existingStudent) {\n        groupedSchedule[dateKey][groupName].push({\n          fullName,\n          group: groupName,\n          date: dateKey\n        });\n      }\n    });\n  });\n  return groupedSchedule;\n};\nconst ViewProtectionSchedulePersons = ({\n  protection_schedule,\n  students_list_for_schedule\n}) => {\n  const formatDate = date => {\n    const options = {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    };\n    return date.toLocaleDateString('ru-RU', options);\n  };\n  const groupedSchedule = distributeStudentsByProtectionDays(protection_schedule);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(groupedSchedule).map(([date, groups]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), Object.entries(groups).map(([group, students]) => /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0424\\u0418\\u041E\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0413\\u0440\\u0443\\u043F\\u043F\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0414\\u0430\\u0442\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: students.map((student, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: student.fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: student.group\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: student.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 41\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 29\n        }, this)]\n      }, group, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }, this))]\n    }, date, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_c = ViewProtectionSchedulePersons;\nexport default ViewProtectionSchedulePersons;\nvar _c;\n$RefreshReg$(_c, \"ViewProtectionSchedulePersons\");","map":{"version":3,"names":["React","Table","jsxDEV","_jsxDEV","distributeStudentsByProtectionDays","schedule","formatDate","date","options","day","month","year","toLocaleDateString","getFullName","studentData","student","last_name","first_name","patronymic","groupedSchedule","forEach","item","index","group","dateKey","groupName","name","groupId","id","students","students_list_for_schedule","filter","fullName","existingStudent","find","s","push","ViewProtectionSchedulePersons","protection_schedule","children","Object","entries","map","groups","fileName","_jsxFileName","lineNumber","columnNumber","bordered","hover","_c","$RefreshReg$"],"sources":["C:/Users/79131/OneDrive/Рабочий стол/хлам/react project/client/src/components/ProtectionSchedule/ViewProtectionSchedulePersons.js"],"sourcesContent":["import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nconst distributeStudentsByProtectionDays = (schedule) => {\r\n    const formatDate = (date) => {\r\n        const options = { day: 'numeric', month: 'long', year: 'numeric' };\r\n        return date.toLocaleDateString('ru-RU', options);\r\n    };\r\n\r\n    const getFullName = (studentData) => {\r\n        if (studentData && studentData.student) {\r\n            const { last_name, first_name, patronymic } = studentData.student;\r\n            return `${last_name} ${first_name} ${patronymic}`;\r\n        } else {\r\n            return 'Unknown';\r\n        }\r\n    };\r\n\r\n    const groupedSchedule = {};\r\n\r\n    schedule.forEach((item, index) => {\r\n        if (!item.group) return;\r\n        const dateKey = formatDate(item.date);\r\n        const groupName = item.group ? item.group.name : '';\r\n        const groupId = item.group ? item.group.id : '';\r\n\r\n        if (!groupedSchedule[dateKey]) {\r\n            groupedSchedule[dateKey] = {};\r\n        }\r\n        if (!groupedSchedule[dateKey][groupName]) {\r\n            groupedSchedule[dateKey][groupName] = [];\r\n        }\r\n\r\n        const students = students_list_for_schedule.filter(student => student.student.group.id === groupId);\r\n        students.forEach(student => {\r\n            const fullName = getFullName(student);\r\n            const existingStudent = groupedSchedule[dateKey][groupName].find(s => s.fullName === fullName);\r\n            if (!existingStudent) {\r\n                groupedSchedule[dateKey][groupName].push({ fullName, group: groupName, date: dateKey });\r\n            }\r\n        });\r\n    });\r\n\r\n    return groupedSchedule;\r\n};\r\n\r\nconst ViewProtectionSchedulePersons = ({ protection_schedule, students_list_for_schedule }) => {\r\n    const formatDate = (date) => {\r\n        const options = { day: 'numeric', month: 'long', year: 'numeric' };\r\n        return date.toLocaleDateString('ru-RU', options);\r\n    };\r\n\r\n    const groupedSchedule = distributeStudentsByProtectionDays(protection_schedule);\r\n\r\n    return (\r\n        <div>\r\n            {Object.entries(groupedSchedule).map(([date, groups]) => (\r\n                <div key={date}>\r\n                    <h3>{date}</h3>\r\n                    {Object.entries(groups).map(([group, students]) => (\r\n                        <Table bordered hover key={group}>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ФИО</th>\r\n                                    <th>Группа</th>\r\n                                    <th>Дата</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {students.map((student, index) => (\r\n                                    <tr key={index}>\r\n                                        <td>{student.fullName}</td>\r\n                                        <td>{student.group}</td>\r\n                                        <td>{student.date}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewProtectionSchedulePersons;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,kCAAkC,GAAIC,QAAQ,IAAK;EACrD,MAAMC,UAAU,GAAIC,IAAI,IAAK;IACzB,MAAMC,OAAO,GAAG;MAAEC,GAAG,EAAE,SAAS;MAAEC,KAAK,EAAE,MAAM;MAAEC,IAAI,EAAE;IAAU,CAAC;IAClE,OAAOJ,IAAI,CAACK,kBAAkB,CAAC,OAAO,EAAEJ,OAAO,CAAC;EACpD,CAAC;EAED,MAAMK,WAAW,GAAIC,WAAW,IAAK;IACjC,IAAIA,WAAW,IAAIA,WAAW,CAACC,OAAO,EAAE;MACpC,MAAM;QAAEC,SAAS;QAAEC,UAAU;QAAEC;MAAW,CAAC,GAAGJ,WAAW,CAACC,OAAO;MACjE,OAAQ,GAAEC,SAAU,IAAGC,UAAW,IAAGC,UAAW,EAAC;IACrD,CAAC,MAAM;MACH,OAAO,SAAS;IACpB;EACJ,CAAC;EAED,MAAMC,eAAe,GAAG,CAAC,CAAC;EAE1Bd,QAAQ,CAACe,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC9B,IAAI,CAACD,IAAI,CAACE,KAAK,EAAE;IACjB,MAAMC,OAAO,GAAGlB,UAAU,CAACe,IAAI,CAACd,IAAI,CAAC;IACrC,MAAMkB,SAAS,GAAGJ,IAAI,CAACE,KAAK,GAAGF,IAAI,CAACE,KAAK,CAACG,IAAI,GAAG,EAAE;IACnD,MAAMC,OAAO,GAAGN,IAAI,CAACE,KAAK,GAAGF,IAAI,CAACE,KAAK,CAACK,EAAE,GAAG,EAAE;IAE/C,IAAI,CAACT,eAAe,CAACK,OAAO,CAAC,EAAE;MAC3BL,eAAe,CAACK,OAAO,CAAC,GAAG,CAAC,CAAC;IACjC;IACA,IAAI,CAACL,eAAe,CAACK,OAAO,CAAC,CAACC,SAAS,CAAC,EAAE;MACtCN,eAAe,CAACK,OAAO,CAAC,CAACC,SAAS,CAAC,GAAG,EAAE;IAC5C;IAEA,MAAMI,QAAQ,GAAGC,0BAA0B,CAACC,MAAM,CAAChB,OAAO,IAAIA,OAAO,CAACA,OAAO,CAACQ,KAAK,CAACK,EAAE,KAAKD,OAAO,CAAC;IACnGE,QAAQ,CAACT,OAAO,CAACL,OAAO,IAAI;MACxB,MAAMiB,QAAQ,GAAGnB,WAAW,CAACE,OAAO,CAAC;MACrC,MAAMkB,eAAe,GAAGd,eAAe,CAACK,OAAO,CAAC,CAACC,SAAS,CAAC,CAACS,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,QAAQ,KAAKA,QAAQ,CAAC;MAC9F,IAAI,CAACC,eAAe,EAAE;QAClBd,eAAe,CAACK,OAAO,CAAC,CAACC,SAAS,CAAC,CAACW,IAAI,CAAC;UAAEJ,QAAQ;UAAET,KAAK,EAAEE,SAAS;UAAElB,IAAI,EAAEiB;QAAQ,CAAC,CAAC;MAC3F;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;EAEF,OAAOL,eAAe;AAC1B,CAAC;AAED,MAAMkB,6BAA6B,GAAGA,CAAC;EAAEC,mBAAmB;EAAER;AAA2B,CAAC,KAAK;EAC3F,MAAMxB,UAAU,GAAIC,IAAI,IAAK;IACzB,MAAMC,OAAO,GAAG;MAAEC,GAAG,EAAE,SAAS;MAAEC,KAAK,EAAE,MAAM;MAAEC,IAAI,EAAE;IAAU,CAAC;IAClE,OAAOJ,IAAI,CAACK,kBAAkB,CAAC,OAAO,EAAEJ,OAAO,CAAC;EACpD,CAAC;EAED,MAAMW,eAAe,GAAGf,kCAAkC,CAACkC,mBAAmB,CAAC;EAE/E,oBACInC,OAAA;IAAAoC,QAAA,EACKC,MAAM,CAACC,OAAO,CAACtB,eAAe,CAAC,CAACuB,GAAG,CAAC,CAAC,CAACnC,IAAI,EAAEoC,MAAM,CAAC,kBAChDxC,OAAA;MAAAoC,QAAA,gBACIpC,OAAA;QAAAoC,QAAA,EAAKhC;MAAI;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACdP,MAAM,CAACC,OAAO,CAACE,MAAM,CAAC,CAACD,GAAG,CAAC,CAAC,CAACnB,KAAK,EAAEM,QAAQ,CAAC,kBAC1C1B,OAAA,CAACF,KAAK;QAAC+C,QAAQ;QAACC,KAAK;QAAAV,QAAA,gBACjBpC,OAAA;UAAAoC,QAAA,eACIpC,OAAA;YAAAoC,QAAA,gBACIpC,OAAA;cAAAoC,QAAA,EAAI;YAAG;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACZ5C,OAAA;cAAAoC,QAAA,EAAI;YAAM;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACf5C,OAAA;cAAAoC,QAAA,EAAI;YAAI;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACb;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eACR5C,OAAA;UAAAoC,QAAA,EACKV,QAAQ,CAACa,GAAG,CAAC,CAAC3B,OAAO,EAAEO,KAAK,kBACzBnB,OAAA;YAAAoC,QAAA,gBACIpC,OAAA;cAAAoC,QAAA,EAAKxB,OAAO,CAACiB;YAAQ;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC3B5C,OAAA;cAAAoC,QAAA,EAAKxB,OAAO,CAACQ;YAAK;cAAAqB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACxB5C,OAAA;cAAAoC,QAAA,EAAKxB,OAAO,CAACR;YAAI;cAAAqC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,GAHlBzB,KAAK;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIV,CACP;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA,GAhBexB,KAAK;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAiBzB,CACV,CAAC;IAAA,GArBIxC,IAAI;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAsBT,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACG,EAAA,GArCIb,6BAA6B;AAuCnC,eAAeA,6BAA6B;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}