{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\79131\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\\\u0445\\u043B\\u0430\\u043C\\\\react project\\\\client\\\\src\\\\components\\\\ProtectionSchedule\\\\ViewProtectionSchedulePersons.js\";\nimport React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ViewProtectionSchedulePersons({\n  protection_schedule,\n  students_list_for_schedule\n}) {\n  const formatDate = dateString => {\n    const parts = dateString.match(/(\\d{2})(\\d{2})(\\d{4})/);\n    if (parts && parts.length === 4) {\n      const year = parts[3];\n      const month = parseInt(parts[2], 10);\n      const day = parseInt(parts[1], 10);\n      const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];\n      return `${day} ${months[month - 1]} ${year}`;\n    } else {\n      return 'Invalid Date';\n    }\n  };\n  const getFullName = studentData => {\n    if (studentData && studentData.student) {\n      const {\n        last_name,\n        first_name,\n        patronymic\n      } = studentData.student;\n      return `${last_name} ${first_name} ${patronymic}`;\n    } else {\n      return 'Unknown';\n    }\n  };\n  const groupedSchedule = protection_schedule.reduce((acc, item) => {\n    const dateKey = formatDate(item.date);\n    if (!acc[dateKey]) {\n      acc[dateKey] = {};\n    }\n    const groupName = item.group ? item.group.name : '';\n    if (!acc[dateKey][groupName]) {\n      acc[dateKey][groupName] = [];\n    }\n    const students = students_list_for_schedule.filter(student => student.student.group.id === item.group.id);\n    students.forEach(student => {\n      const fullName = getFullName(student);\n      acc[dateKey][groupName].push({\n        fullName,\n        group: groupName,\n        date: formatDate(item.date)\n      });\n    });\n    return acc;\n  }, {});\n  const distributeStudentsByProtectionDays = schedule => {\n    Object.keys(schedule).forEach(date => {\n      Object.keys(schedule[date]).forEach(group => {\n        var _protection_schedule$, _protection_schedule$2;\n        const students = schedule[date][group];\n        const protectionDays = ((_protection_schedule$ = protection_schedule.find(item => item.group.name === group)) === null || _protection_schedule$ === void 0 ? void 0 : (_protection_schedule$2 = _protection_schedule$.group) === null || _protection_schedule$2 === void 0 ? void 0 : _protection_schedule$2.protection_days) || 1;\n        const studentsPerDay = Math.ceil(students.length / protectionDays);\n        let remainingStudents = students.slice();\n        for (let i = 0; i < protectionDays; i++) {\n          const currentStudents = remainingStudents.slice(0, studentsPerDay);\n          if (!schedule[getNextDay(date, i)]) {\n            schedule[getNextDay(date, i)] = {};\n          }\n          schedule[getNextDay(date, i)][group] = currentStudents;\n          remainingStudents = remainingStudents.slice(studentsPerDay);\n        }\n        delete schedule[date][group];\n      });\n    });\n    return schedule;\n  };\n  const getNextDay = (dateString, daysToAdd) => {\n    const date = new Date(dateString);\n    date.setDate(date.getDate() + daysToAdd);\n    return formatDate(date.toLocaleDateString());\n  };\n  const limitedSchedule = distributeStudentsByProtectionDays(groupedSchedule);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(limitedSchedule).map(([date, groups]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0424\\u0418\\u041E\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0413\\u0440\\u0443\\u043F\\u043F\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0414\\u0430\\u0442\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.entries(groups).map(([group, students]) => students.map((student, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: student.fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: student.group\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: student.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 41\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 37\n          }, this)))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, date, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n_c = ViewProtectionSchedulePersons;\nexport default ViewProtectionSchedulePersons;\nvar _c;\n$RefreshReg$(_c, \"ViewProtectionSchedulePersons\");","map":{"version":3,"names":["React","Table","jsxDEV","_jsxDEV","ViewProtectionSchedulePersons","protection_schedule","students_list_for_schedule","formatDate","dateString","parts","match","length","year","month","parseInt","day","months","getFullName","studentData","student","last_name","first_name","patronymic","groupedSchedule","reduce","acc","item","dateKey","date","groupName","group","name","students","filter","id","forEach","fullName","push","distributeStudentsByProtectionDays","schedule","Object","keys","_protection_schedule$","_protection_schedule$2","protectionDays","find","protection_days","studentsPerDay","Math","ceil","remainingStudents","slice","i","currentStudents","getNextDay","daysToAdd","Date","setDate","getDate","toLocaleDateString","limitedSchedule","children","entries","map","groups","fileName","_jsxFileName","lineNumber","columnNumber","bordered","hover","index","_c","$RefreshReg$"],"sources":["C:/Users/79131/OneDrive/Рабочий стол/хлам/react project/client/src/components/ProtectionSchedule/ViewProtectionSchedulePersons.js"],"sourcesContent":["import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nfunction ViewProtectionSchedulePersons({ protection_schedule, students_list_for_schedule }) {\r\n    const formatDate = (dateString) => {\r\n        const parts = dateString.match(/(\\d{2})(\\d{2})(\\d{4})/);\r\n        if (parts && parts.length === 4) {\r\n            const year = parts[3];\r\n            const month = parseInt(parts[2], 10);\r\n            const day = parseInt(parts[1], 10);\r\n            const months = [\r\n                'января', 'февраля', 'марта', 'апреля', 'мая', 'июня',\r\n                'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'\r\n            ];\r\n            return `${day} ${months[month - 1]} ${year}`;\r\n        } else {\r\n            return 'Invalid Date';\r\n        }\r\n    };\r\n\r\n    const getFullName = (studentData) => {\r\n        if (studentData && studentData.student) {\r\n            const { last_name, first_name, patronymic } = studentData.student;\r\n            return `${last_name} ${first_name} ${patronymic}`;\r\n        } else {\r\n            return 'Unknown';\r\n        }\r\n    };\r\n\r\n    const groupedSchedule = protection_schedule.reduce((acc, item) => {\r\n        const dateKey = formatDate(item.date);\r\n        if (!acc[dateKey]) {\r\n            acc[dateKey] = {};\r\n        }\r\n        const groupName = item.group ? item.group.name : '';\r\n        if (!acc[dateKey][groupName]) {\r\n            acc[dateKey][groupName] = [];\r\n        }\r\n        const students = students_list_for_schedule.filter(student => student.student.group.id === item.group.id);\r\n        students.forEach(student => {\r\n            const fullName = getFullName(student);\r\n            acc[dateKey][groupName].push({ fullName, group: groupName, date: formatDate(item.date) });\r\n        });\r\n        return acc;\r\n    }, {});\r\n\r\n    const distributeStudentsByProtectionDays = (schedule) => {\r\n        Object.keys(schedule).forEach(date => {\r\n            Object.keys(schedule[date]).forEach(group => {\r\n                const students = schedule[date][group];\r\n                const protectionDays = protection_schedule.find(item => item.group.name === group)?.group?.protection_days || 1;\r\n                const studentsPerDay = Math.ceil(students.length / protectionDays);\r\n                let remainingStudents = students.slice();\r\n                for (let i = 0; i < protectionDays; i++) {\r\n                    const currentStudents = remainingStudents.slice(0, studentsPerDay);\r\n                    if (!schedule[getNextDay(date, i)]) {\r\n                        schedule[getNextDay(date, i)] = {};\r\n                    }\r\n                    schedule[getNextDay(date, i)][group] = currentStudents;\r\n                    remainingStudents = remainingStudents.slice(studentsPerDay);\r\n                }\r\n                delete schedule[date][group];\r\n            });\r\n        });\r\n        return schedule;\r\n    };\r\n\r\n    const getNextDay = (dateString, daysToAdd) => {\r\n        const date = new Date(dateString);\r\n        date.setDate(date.getDate() + daysToAdd);\r\n        return formatDate(date.toLocaleDateString());\r\n    };\r\n\r\n    const limitedSchedule = distributeStudentsByProtectionDays(groupedSchedule);\r\n\r\n    return (\r\n        <div>\r\n            {Object.entries(limitedSchedule).map(([date, groups]) => (\r\n                <div key={date}>\r\n                    <h3>{date}</h3>\r\n                    <Table bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>ФИО</th>\r\n                                <th>Группа</th>\r\n                                <th>Дата</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {Object.entries(groups).map(([group, students]) => (\r\n                                students.map((student, index) => (\r\n                                    <tr key={index}>\r\n                                        <td>{student.fullName}</td>\r\n                                        <td>{student.group}</td>\r\n                                        <td>{student.date}</td>\r\n                                    </tr>\r\n                                ))\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ViewProtectionSchedulePersons;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}