{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\79131\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\\\u0445\\u043B\\u0430\\u043C\\\\react project\\\\client\\\\src\\\\components\\\\ProtectionSchedule\\\\ViewProtectionSchedulePersons.js\";\nimport React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewProtectionSchedulePersons = ({\n  protection_schedule,\n  students_list_for_schedule\n}) => {\n  // Функция для форматирования даты\n  const formatDate = date => {\n    const options = {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    };\n    return date.toLocaleDateString('ru-RU', options);\n  };\n\n  // Функция для получения полного имени студента\n  const getFullName = studentData => {\n    if (studentData && studentData.student) {\n      const {\n        last_name,\n        first_name,\n        patronymic\n      } = studentData.student;\n      return `${last_name} ${first_name} ${patronymic}`;\n    } else {\n      return 'Unknown';\n    }\n  };\n\n  // Функция для распределения студентов по дням защиты\n  const distributeStudentsByProtectionDays = schedule => {\n    const groupedSchedule = {};\n    schedule.forEach(item => {\n      if (!item.group) return;\n      const dateKey = formatDate(item.date);\n      const groupName = item.group.name;\n      const groupId = item.group.id;\n\n      // Инициализация объекта для текущей даты, если он еще не существует\n      if (!groupedSchedule[dateKey]) {\n        groupedSchedule[dateKey] = {};\n      }\n\n      // Инициализация массива студентов для текущей группы на текущую дату\n      if (!groupedSchedule[dateKey][groupName]) {\n        groupedSchedule[dateKey][groupName] = [];\n      }\n\n      // Фильтрация студентов по их группе и добавление их в массив\n      const students = students_list_for_schedule.filter(student => student.student.group.id === groupId);\n      groupedSchedule[dateKey][groupName] = students;\n    });\n    return groupedSchedule;\n  };\n\n  // Функция для ограничения количества студентов в группе до 12 человек на день\n  const limitStudentsPerDay = schedule => {\n    const limitedSchedule = {};\n\n    // Обход объекта с распределенными студентами по дням\n    Object.entries(schedule).forEach(([date, groups]) => {\n      limitedSchedule[date] = {\n        day1: {},\n        day2: {}\n      };\n\n      // Обход объекта с группами студентов на текущий день\n      Object.entries(groups).forEach(([group, students]) => {\n        const totalStudents = students.length;\n\n        // Если студентов больше 12, делим их на два дня\n        if (totalStudents > 12) {\n          const firstDayStudents = students.slice(0, 12);\n          const secondDayStudents = students.slice(12);\n          limitedSchedule[date]['day1'][group] = firstDayStudents;\n          limitedSchedule[date]['day2'][group] = secondDayStudents;\n        } else {\n          // Если студентов 12 или меньше, оставляем их на первый день\n          limitedSchedule[date]['day1'][group] = students;\n        }\n      });\n    });\n    return limitedSchedule;\n  };\n\n  // Получаем распределенных и ограниченных студентов по дням защиты\n  const groupedSchedule = distributeStudentsByProtectionDays(protection_schedule);\n  const limitedSchedule = limitStudentsPerDay(groupedSchedule);\n\n  // Возвращаем JSX для отображения таблиц с распределенными студентами\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(limitedSchedule).map(([date, groups]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), Object.entries(groups).map(([day, groupStudents]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: day\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }, this), Object.entries(groupStudents).map(([group, students]) => /*#__PURE__*/_jsxDEV(Table, {\n          bordered: true,\n          hover: true,\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0424\\u0418\\u041E\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0413\\u0440\\u0443\\u043F\\u043F\\u0430\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0414\\u0430\\u0442\\u0430\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: students.map((student, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: getFullName(student)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: group\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 49\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 45\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 37\n          }, this)]\n        }, group, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 33\n        }, this))]\n      }, day, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }, this))]\n    }, date, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_c = ViewProtectionSchedulePersons;\nexport default ViewProtectionSchedulePersons;\nvar _c;\n$RefreshReg$(_c, \"ViewProtectionSchedulePersons\");","map":{"version":3,"names":["React","Table","jsxDEV","_jsxDEV","ViewProtectionSchedulePersons","protection_schedule","students_list_for_schedule","formatDate","date","options","day","month","year","toLocaleDateString","getFullName","studentData","student","last_name","first_name","patronymic","distributeStudentsByProtectionDays","schedule","groupedSchedule","forEach","item","group","dateKey","groupName","name","groupId","id","students","filter","limitStudentsPerDay","limitedSchedule","Object","entries","groups","day1","day2","totalStudents","length","firstDayStudents","slice","secondDayStudents","children","map","fileName","_jsxFileName","lineNumber","columnNumber","groupStudents","bordered","hover","index","_c","$RefreshReg$"],"sources":["C:/Users/79131/OneDrive/Рабочий стол/хлам/react project/client/src/components/ProtectionSchedule/ViewProtectionSchedulePersons.js"],"sourcesContent":["import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nconst ViewProtectionSchedulePersons = ({ protection_schedule, students_list_for_schedule }) => {\r\n    // Функция для форматирования даты\r\n    const formatDate = (date) => {\r\n        const options = { day: 'numeric', month: 'long', year: 'numeric' };\r\n        return date.toLocaleDateString('ru-RU', options);\r\n    };\r\n\r\n    // Функция для получения полного имени студента\r\n    const getFullName = (studentData) => {\r\n        if (studentData && studentData.student) {\r\n            const { last_name, first_name, patronymic } = studentData.student;\r\n            return `${last_name} ${first_name} ${patronymic}`;\r\n        } else {\r\n            return 'Unknown';\r\n        }\r\n    };\r\n\r\n    // Функция для распределения студентов по дням защиты\r\n    const distributeStudentsByProtectionDays = (schedule) => {\r\n        const groupedSchedule = {};\r\n\r\n        schedule.forEach((item) => {\r\n            if (!item.group) return;\r\n\r\n            const dateKey = formatDate(item.date);\r\n            const groupName = item.group.name;\r\n            const groupId = item.group.id;\r\n\r\n            // Инициализация объекта для текущей даты, если он еще не существует\r\n            if (!groupedSchedule[dateKey]) {\r\n                groupedSchedule[dateKey] = {};\r\n            }\r\n\r\n            // Инициализация массива студентов для текущей группы на текущую дату\r\n            if (!groupedSchedule[dateKey][groupName]) {\r\n                groupedSchedule[dateKey][groupName] = [];\r\n            }\r\n\r\n            // Фильтрация студентов по их группе и добавление их в массив\r\n            const students = students_list_for_schedule.filter(student => student.student.group.id === groupId);\r\n            groupedSchedule[dateKey][groupName] = students;\r\n        });\r\n\r\n        return groupedSchedule;\r\n    };\r\n\r\n    // Функция для ограничения количества студентов в группе до 12 человек на день\r\n    const limitStudentsPerDay = (schedule) => {\r\n        const limitedSchedule = {};\r\n\r\n        // Обход объекта с распределенными студентами по дням\r\n        Object.entries(schedule).forEach(([date, groups]) => {\r\n            limitedSchedule[date] = { day1: {}, day2: {} };\r\n\r\n            // Обход объекта с группами студентов на текущий день\r\n            Object.entries(groups).forEach(([group, students]) => {\r\n                const totalStudents = students.length;\r\n\r\n                // Если студентов больше 12, делим их на два дня\r\n                if (totalStudents > 12) {\r\n                    const firstDayStudents = students.slice(0, 12);\r\n                    const secondDayStudents = students.slice(12);\r\n\r\n                    limitedSchedule[date]['day1'][group] = firstDayStudents;\r\n                    limitedSchedule[date]['day2'][group] = secondDayStudents;\r\n                } else {\r\n                    // Если студентов 12 или меньше, оставляем их на первый день\r\n                    limitedSchedule[date]['day1'][group] = students;\r\n                }\r\n            });\r\n        });\r\n\r\n        return limitedSchedule;\r\n    };\r\n\r\n    // Получаем распределенных и ограниченных студентов по дням защиты\r\n    const groupedSchedule = distributeStudentsByProtectionDays(protection_schedule);\r\n    const limitedSchedule = limitStudentsPerDay(groupedSchedule);\r\n\r\n    // Возвращаем JSX для отображения таблиц с распределенными студентами\r\n    return (\r\n        <div>\r\n            {Object.entries(limitedSchedule).map(([date, groups]) => (\r\n                <div key={date}>\r\n                    <h3>{date}</h3>\r\n                    {Object.entries(groups).map(([day, groupStudents]) => (\r\n                        <div key={day}>\r\n                            <h4>{day}</h4>\r\n                            {Object.entries(groupStudents).map(([group, students]) => (\r\n                                <Table bordered hover key={group}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>ФИО</th>\r\n                                            <th>Группа</th>\r\n                                            <th>Дата</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {students.map((student, index) => (\r\n                                            <tr key={index}>\r\n                                                <td>{getFullName(student)}</td>\r\n                                                <td>{group}</td>\r\n                                                <td>{date}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                    </tbody>\r\n                                </Table>\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewProtectionSchedulePersons;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,6BAA6B,GAAGA,CAAC;EAAEC,mBAAmB;EAAEC;AAA2B,CAAC,KAAK;EAC3F;EACA,MAAMC,UAAU,GAAIC,IAAI,IAAK;IACzB,MAAMC,OAAO,GAAG;MAAEC,GAAG,EAAE,SAAS;MAAEC,KAAK,EAAE,MAAM;MAAEC,IAAI,EAAE;IAAU,CAAC;IAClE,OAAOJ,IAAI,CAACK,kBAAkB,CAAC,OAAO,EAAEJ,OAAO,CAAC;EACpD,CAAC;;EAED;EACA,MAAMK,WAAW,GAAIC,WAAW,IAAK;IACjC,IAAIA,WAAW,IAAIA,WAAW,CAACC,OAAO,EAAE;MACpC,MAAM;QAAEC,SAAS;QAAEC,UAAU;QAAEC;MAAW,CAAC,GAAGJ,WAAW,CAACC,OAAO;MACjE,OAAQ,GAAEC,SAAU,IAAGC,UAAW,IAAGC,UAAW,EAAC;IACrD,CAAC,MAAM;MACH,OAAO,SAAS;IACpB;EACJ,CAAC;;EAED;EACA,MAAMC,kCAAkC,GAAIC,QAAQ,IAAK;IACrD,MAAMC,eAAe,GAAG,CAAC,CAAC;IAE1BD,QAAQ,CAACE,OAAO,CAAEC,IAAI,IAAK;MACvB,IAAI,CAACA,IAAI,CAACC,KAAK,EAAE;MAEjB,MAAMC,OAAO,GAAGnB,UAAU,CAACiB,IAAI,CAAChB,IAAI,CAAC;MACrC,MAAMmB,SAAS,GAAGH,IAAI,CAACC,KAAK,CAACG,IAAI;MACjC,MAAMC,OAAO,GAAGL,IAAI,CAACC,KAAK,CAACK,EAAE;;MAE7B;MACA,IAAI,CAACR,eAAe,CAACI,OAAO,CAAC,EAAE;QAC3BJ,eAAe,CAACI,OAAO,CAAC,GAAG,CAAC,CAAC;MACjC;;MAEA;MACA,IAAI,CAACJ,eAAe,CAACI,OAAO,CAAC,CAACC,SAAS,CAAC,EAAE;QACtCL,eAAe,CAACI,OAAO,CAAC,CAACC,SAAS,CAAC,GAAG,EAAE;MAC5C;;MAEA;MACA,MAAMI,QAAQ,GAAGzB,0BAA0B,CAAC0B,MAAM,CAAChB,OAAO,IAAIA,OAAO,CAACA,OAAO,CAACS,KAAK,CAACK,EAAE,KAAKD,OAAO,CAAC;MACnGP,eAAe,CAACI,OAAO,CAAC,CAACC,SAAS,CAAC,GAAGI,QAAQ;IAClD,CAAC,CAAC;IAEF,OAAOT,eAAe;EAC1B,CAAC;;EAED;EACA,MAAMW,mBAAmB,GAAIZ,QAAQ,IAAK;IACtC,MAAMa,eAAe,GAAG,CAAC,CAAC;;IAE1B;IACAC,MAAM,CAACC,OAAO,CAACf,QAAQ,CAAC,CAACE,OAAO,CAAC,CAAC,CAACf,IAAI,EAAE6B,MAAM,CAAC,KAAK;MACjDH,eAAe,CAAC1B,IAAI,CAAC,GAAG;QAAE8B,IAAI,EAAE,CAAC,CAAC;QAAEC,IAAI,EAAE,CAAC;MAAE,CAAC;;MAE9C;MACAJ,MAAM,CAACC,OAAO,CAACC,MAAM,CAAC,CAACd,OAAO,CAAC,CAAC,CAACE,KAAK,EAAEM,QAAQ,CAAC,KAAK;QAClD,MAAMS,aAAa,GAAGT,QAAQ,CAACU,MAAM;;QAErC;QACA,IAAID,aAAa,GAAG,EAAE,EAAE;UACpB,MAAME,gBAAgB,GAAGX,QAAQ,CAACY,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;UAC9C,MAAMC,iBAAiB,GAAGb,QAAQ,CAACY,KAAK,CAAC,EAAE,CAAC;UAE5CT,eAAe,CAAC1B,IAAI,CAAC,CAAC,MAAM,CAAC,CAACiB,KAAK,CAAC,GAAGiB,gBAAgB;UACvDR,eAAe,CAAC1B,IAAI,CAAC,CAAC,MAAM,CAAC,CAACiB,KAAK,CAAC,GAAGmB,iBAAiB;QAC5D,CAAC,MAAM;UACH;UACAV,eAAe,CAAC1B,IAAI,CAAC,CAAC,MAAM,CAAC,CAACiB,KAAK,CAAC,GAAGM,QAAQ;QACnD;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,OAAOG,eAAe;EAC1B,CAAC;;EAED;EACA,MAAMZ,eAAe,GAAGF,kCAAkC,CAACf,mBAAmB,CAAC;EAC/E,MAAM6B,eAAe,GAAGD,mBAAmB,CAACX,eAAe,CAAC;;EAE5D;EACA,oBACInB,OAAA;IAAA0C,QAAA,EACKV,MAAM,CAACC,OAAO,CAACF,eAAe,CAAC,CAACY,GAAG,CAAC,CAAC,CAACtC,IAAI,EAAE6B,MAAM,CAAC,kBAChDlC,OAAA;MAAA0C,QAAA,gBACI1C,OAAA;QAAA0C,QAAA,EAAKrC;MAAI;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACdf,MAAM,CAACC,OAAO,CAACC,MAAM,CAAC,CAACS,GAAG,CAAC,CAAC,CAACpC,GAAG,EAAEyC,aAAa,CAAC,kBAC7ChD,OAAA;QAAA0C,QAAA,gBACI1C,OAAA;UAAA0C,QAAA,EAAKnC;QAAG;UAAAqC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACbf,MAAM,CAACC,OAAO,CAACe,aAAa,CAAC,CAACL,GAAG,CAAC,CAAC,CAACrB,KAAK,EAAEM,QAAQ,CAAC,kBACjD5B,OAAA,CAACF,KAAK;UAACmD,QAAQ;UAACC,KAAK;UAAAR,QAAA,gBACjB1C,OAAA;YAAA0C,QAAA,eACI1C,OAAA;cAAA0C,QAAA,gBACI1C,OAAA;gBAAA0C,QAAA,EAAI;cAAG;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACZ/C,OAAA;gBAAA0C,QAAA,EAAI;cAAM;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACf/C,OAAA;gBAAA0C,QAAA,EAAI;cAAI;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACb;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACR/C,OAAA;YAAA0C,QAAA,EACKd,QAAQ,CAACe,GAAG,CAAC,CAAC9B,OAAO,EAAEsC,KAAK,kBACzBnD,OAAA;cAAA0C,QAAA,gBACI1C,OAAA;gBAAA0C,QAAA,EAAK/B,WAAW,CAACE,OAAO;cAAC;gBAAA+B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC/B/C,OAAA;gBAAA0C,QAAA,EAAKpB;cAAK;gBAAAsB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAChB/C,OAAA;gBAAA0C,QAAA,EAAKrC;cAAI;gBAAAuC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA,GAHVI,KAAK;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAIV,CACP;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA,GAhBezB,KAAK;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAiBzB,CACV,CAAC;MAAA,GArBIxC,GAAG;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAsBR,CACR,CAAC;IAAA,GA1BI1C,IAAI;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA2BT,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACK,EAAA,GAlHInD,6BAA6B;AAoHnC,eAAeA,6BAA6B;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}