{"ast":null,"code":"import petrovich from 'petrovich';\nimport RussianNouns from 'russian-nouns-js';\nimport { saveAs } from 'file-saver';\nimport PizZip from 'pizzip';\nimport Docxtemplater from 'docxtemplater';\nimport word from './protocol.docx';\nconst generateProtocolsFunction = async ({\n  composition_of_sec\n}) => {\n  const chairman = composition_of_sec.find(comp => comp.chairman_of_SEC === true);\n  const np = getInitials(request_data_task.student.user.first_name, request_data_task.student.user.patronymic);\n  try {\n    const response = await fetch(word);\n    if (!response.ok) throw new Error('Ошибка сети');\n    const arrayBuffer = await response.arrayBuffer();\n    const zip = new PizZip(arrayBuffer);\n    const doc = new Docxtemplater(zip);\n    const dataToRender = {\n      chairman_first_name: chairman.user.fist_name,\n      chairman_np: np,\n      chairman_degree: chairman.employee_information.academic_degree,\n      chairman_job_title: chairman.employee_information.job_title,\n      members_list: members_list.map(stage => ({\n        members_last_name: stage.user.last_name,\n        members_np: stage.user.first_name,\n        members_degree: stage.employee_information.academic_degree ? stage.employee_information.academic_degree : '',\n        members_job_title: stage.employee_information.job_title\n      }))\n    };\n    doc.setData(dataToRender);\n    doc.render();\n    const output = doc.getZip().generate({\n      type: 'blob'\n    });\n    saveAs(output, `Задание на ВКР ${request_data_task.student.user.last_name}.docx`);\n  } catch (error) {\n    console.error('Ошибка загрузки файла:', error);\n  }\n};\nexport default generateProtocolsFunction;","map":{"version":3,"names":["petrovich","RussianNouns","saveAs","PizZip","Docxtemplater","word","generateProtocolsFunction","composition_of_sec","chairman","find","comp","chairman_of_SEC","np","getInitials","request_data_task","student","user","first_name","patronymic","response","fetch","ok","Error","arrayBuffer","zip","doc","dataToRender","chairman_first_name","fist_name","chairman_np","chairman_degree","employee_information","academic_degree","chairman_job_title","job_title","members_list","map","stage","members_last_name","last_name","members_np","members_degree","members_job_title","setData","render","output","getZip","generate","type","error","console"],"sources":["C:/Users/79131/OneDrive/Рабочий стол/хлам/react project/client/src/components/Forms/GenerateProtocols/GenerateProtocolFunction.js"],"sourcesContent":["import petrovich from 'petrovich';\r\nimport RussianNouns from 'russian-nouns-js';\r\nimport { saveAs } from 'file-saver';\r\nimport PizZip from 'pizzip';\r\nimport Docxtemplater from 'docxtemplater';\r\nimport word from './protocol.docx';\r\n\r\nconst generateProtocolsFunction = async ({composition_of_sec }) => {\r\n    const chairman = composition_of_sec.find(comp=>comp.chairman_of_SEC===true)\r\n    const np = getInitials(request_data_task.student.user.first_name, request_data_task.student.user.patronymic);\r\n  try {\r\n    const response = await fetch(word);\r\n    if (!response.ok) throw new Error('Ошибка сети');\r\n    const arrayBuffer = await response.arrayBuffer();\r\n    const zip = new PizZip(arrayBuffer);\r\n    const doc = new Docxtemplater(zip);\r\n\r\n    const dataToRender = {\r\n       \r\n        chairman_first_name:chairman.user.fist_name ,\r\n        chairman_np: np,\r\n        chairman_degree:chairman.employee_information.academic_degree,\r\n        chairman_job_title:chairman.employee_information.job_title,\r\n        members_list: members_list.map(stage => ({\r\n            members_last_name: stage.user.last_name,\r\n            members_np: stage.user.first_name,\r\n            members_degree: stage.employee_information.academic_degree ? stage.employee_information.academic_degree : '',\r\n            members_job_title: stage.employee_information.job_title,\r\n          }))\r\n      }\r\n\r\n    doc.setData(dataToRender);\r\n    doc.render();\r\n\r\n    const output = doc.getZip().generate({ type: 'blob' });\r\n    saveAs(output, `Задание на ВКР ${request_data_task.student.user.last_name}.docx`);\r\n  } catch (error) {\r\n    console.error('Ошибка загрузки файла:', error);\r\n  }\r\n};\r\n\r\nexport default generateProtocolsFunction;\r\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,SAASC,MAAM,QAAQ,YAAY;AACnC,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,aAAa,MAAM,eAAe;AACzC,OAAOC,IAAI,MAAM,iBAAiB;AAElC,MAAMC,yBAAyB,GAAG,MAAAA,CAAO;EAACC;AAAmB,CAAC,KAAK;EAC/D,MAAMC,QAAQ,GAAGD,kBAAkB,CAACE,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACC,eAAe,KAAG,IAAI,CAAC;EAC3E,MAAMC,EAAE,GAAGC,WAAW,CAACC,iBAAiB,CAACC,OAAO,CAACC,IAAI,CAACC,UAAU,EAAEH,iBAAiB,CAACC,OAAO,CAACC,IAAI,CAACE,UAAU,CAAC;EAC9G,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACf,IAAI,CAAC;IAClC,IAAI,CAACc,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;IAChD,MAAMC,WAAW,GAAG,MAAMJ,QAAQ,CAACI,WAAW,CAAC,CAAC;IAChD,MAAMC,GAAG,GAAG,IAAIrB,MAAM,CAACoB,WAAW,CAAC;IACnC,MAAME,GAAG,GAAG,IAAIrB,aAAa,CAACoB,GAAG,CAAC;IAElC,MAAME,YAAY,GAAG;MAEjBC,mBAAmB,EAACnB,QAAQ,CAACQ,IAAI,CAACY,SAAS;MAC3CC,WAAW,EAAEjB,EAAE;MACfkB,eAAe,EAACtB,QAAQ,CAACuB,oBAAoB,CAACC,eAAe;MAC7DC,kBAAkB,EAACzB,QAAQ,CAACuB,oBAAoB,CAACG,SAAS;MAC1DC,YAAY,EAAEA,YAAY,CAACC,GAAG,CAACC,KAAK,KAAK;QACrCC,iBAAiB,EAAED,KAAK,CAACrB,IAAI,CAACuB,SAAS;QACvCC,UAAU,EAAEH,KAAK,CAACrB,IAAI,CAACC,UAAU;QACjCwB,cAAc,EAAEJ,KAAK,CAACN,oBAAoB,CAACC,eAAe,GAAGK,KAAK,CAACN,oBAAoB,CAACC,eAAe,GAAG,EAAE;QAC5GU,iBAAiB,EAAEL,KAAK,CAACN,oBAAoB,CAACG;MAChD,CAAC,CAAC;IACN,CAAC;IAEHT,GAAG,CAACkB,OAAO,CAACjB,YAAY,CAAC;IACzBD,GAAG,CAACmB,MAAM,CAAC,CAAC;IAEZ,MAAMC,MAAM,GAAGpB,GAAG,CAACqB,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAO,CAAC,CAAC;IACtD9C,MAAM,CAAC2C,MAAM,EAAG,kBAAiB/B,iBAAiB,CAACC,OAAO,CAACC,IAAI,CAACuB,SAAU,OAAM,CAAC;EACnF,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAChD;AACF,CAAC;AAED,eAAe3C,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}