{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\79131\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\\\u0445\\u043B\\u0430\\u043C\\\\react project\\\\client\\\\src\\\\components\\\\ProtectionSchedule\\\\ViewProtectionSchedulePersons.js\";\nimport React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewProtectionSchedulePersons = ({\n  protection_schedule,\n  students_list_for_schedule\n}) => {\n  const formatDate = dateString => {\n    const parts = dateString.match(/(\\d{2})(\\d{2})(\\d{4})/);\n    if (parts && parts.length === 4) {\n      const year = parts[3];\n      const month = parseInt(parts[2], 10);\n      const day = parseInt(parts[1], 10);\n      const months = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'];\n      return `${day} ${months[month - 1]} ${year}`;\n    } else {\n      return 'Invalid Date';\n    }\n  };\n  const getFullName = studentData => {\n    if (studentData && studentData.student) {\n      const {\n        last_name,\n        first_name,\n        patronymic\n      } = studentData.student;\n      return `${last_name} ${first_name} ${patronymic}`;\n    } else {\n      return 'Unknown';\n    }\n  };\n  const distributeStudentsByProtectionDays = schedule => {\n    const groupedSchedule = {};\n    const usedStudents = {}; // Для отслеживания использованных студентов\n\n    schedule.forEach(item => {\n      if (!item.group) return; // Пропускаем записи без группы\n      const dateKey = formatDate(item.date);\n      const groupName = item.group ? item.group.name : '';\n      if (!groupedSchedule[dateKey]) {\n        groupedSchedule[dateKey] = {};\n      }\n      if (!groupedSchedule[dateKey][groupName]) {\n        groupedSchedule[dateKey][groupName] = [];\n      }\n      const students = students_list_for_schedule.filter(student => student.student.group.id === item.group.id);\n      students.forEach(student => {\n        const fullName = getFullName(student);\n        if (!usedStudents[fullName]) {\n          // Проверяем, не был ли уже студент записан на предыдущий день\n          groupedSchedule[dateKey][groupName].push({\n            fullName,\n            group: groupName,\n            date: formatDate(item.date)\n          });\n          usedStudents[fullName] = true; // Добавляем студента в список использованных\n        }\n      });\n    });\n\n    // Ограничение на 12 человек в день\n    Object.entries(groupedSchedule).forEach(([date, groups]) => {\n      Object.entries(groups).forEach(([group, students]) => {\n        const studentsCount = students.length;\n        if (studentsCount > 12) {\n          const remainingStudents = students.slice(12);\n          groupedSchedule[getNextDay(date, 1)] = groupedSchedule[getNextDay(date, 1)] || {};\n          groupedSchedule[getNextDay(date, 1)][group] = remainingStudents;\n          groupedSchedule[date][group] = students.slice(0, 12);\n        }\n      });\n    });\n    return groupedSchedule;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(distributeStudentsByProtectionDays(protection_schedule)).map(([date, groups]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0424\\u0418\\u041E\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0413\\u0440\\u0443\\u043F\\u043F\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0414\\u0430\\u0442\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.entries(groups).map(([group, students]) => students.map((student, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: student.fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: student.group\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: student.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 41\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 37\n          }, this)))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, date, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_c = ViewProtectionSchedulePersons;\nexport default ViewProtectionSchedulePersons;\nvar _c;\n$RefreshReg$(_c, \"ViewProtectionSchedulePersons\");","map":{"version":3,"names":["React","Table","jsxDEV","_jsxDEV","ViewProtectionSchedulePersons","protection_schedule","students_list_for_schedule","formatDate","dateString","parts","match","length","year","month","parseInt","day","months","getFullName","studentData","student","last_name","first_name","patronymic","distributeStudentsByProtectionDays","schedule","groupedSchedule","usedStudents","forEach","item","group","dateKey","date","groupName","name","students","filter","id","fullName","push","Object","entries","groups","studentsCount","remainingStudents","slice","getNextDay","children","map","fileName","_jsxFileName","lineNumber","columnNumber","bordered","hover","index","_c","$RefreshReg$"],"sources":["C:/Users/79131/OneDrive/Рабочий стол/хлам/react project/client/src/components/ProtectionSchedule/ViewProtectionSchedulePersons.js"],"sourcesContent":["import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nconst ViewProtectionSchedulePersons = ({ protection_schedule, students_list_for_schedule }) => {\r\n    const formatDate = (dateString) => {\r\n        const parts = dateString.match(/(\\d{2})(\\d{2})(\\d{4})/);\r\n        if (parts && parts.length === 4) {\r\n            const year = parts[3];\r\n            const month = parseInt(parts[2], 10);\r\n            const day = parseInt(parts[1], 10);\r\n            const months = [\r\n                'января', 'февраля', 'марта', 'апреля', 'мая', 'июня',\r\n                'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'\r\n            ];\r\n            return `${day} ${months[month - 1]} ${year}`;\r\n        } else {\r\n            return 'Invalid Date';\r\n        }\r\n    };\r\n\r\n    const getFullName = (studentData) => {\r\n        if (studentData && studentData.student) {\r\n            const { last_name, first_name, patronymic } = studentData.student;\r\n            return `${last_name} ${first_name} ${patronymic}`;\r\n        } else {\r\n            return 'Unknown';\r\n        }\r\n    };\r\n\r\n    const distributeStudentsByProtectionDays = (schedule) => {\r\n        const groupedSchedule = {};\r\n        const usedStudents = {}; // Для отслеживания использованных студентов\r\n\r\n        schedule.forEach((item) => {\r\n            if (!item.group) return; // Пропускаем записи без группы\r\n            const dateKey = formatDate(item.date);\r\n            const groupName = item.group ? item.group.name : '';\r\n            if (!groupedSchedule[dateKey]) {\r\n                groupedSchedule[dateKey] = {};\r\n            }\r\n            if (!groupedSchedule[dateKey][groupName]) {\r\n                groupedSchedule[dateKey][groupName] = [];\r\n            }\r\n            const students = students_list_for_schedule.filter(student => student.student.group.id === item.group.id);\r\n            students.forEach(student => {\r\n                const fullName = getFullName(student);\r\n                if (!usedStudents[fullName]) { // Проверяем, не был ли уже студент записан на предыдущий день\r\n                    groupedSchedule[dateKey][groupName].push({ fullName, group: groupName, date: formatDate(item.date) });\r\n                    usedStudents[fullName] = true; // Добавляем студента в список использованных\r\n                }\r\n            });\r\n        });\r\n\r\n        // Ограничение на 12 человек в день\r\n        Object.entries(groupedSchedule).forEach(([date, groups]) => {\r\n            Object.entries(groups).forEach(([group, students]) => {\r\n                const studentsCount = students.length;\r\n                if (studentsCount > 12) {\r\n                    const remainingStudents = students.slice(12);\r\n                    groupedSchedule[getNextDay(date, 1)] = groupedSchedule[getNextDay(date, 1)] || {};\r\n                    groupedSchedule[getNextDay(date, 1)][group] = remainingStudents;\r\n                    groupedSchedule[date][group] = students.slice(0, 12);\r\n                }\r\n            });\r\n        });\r\n\r\n        return groupedSchedule;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {Object.entries(distributeStudentsByProtectionDays(protection_schedule)).map(([date, groups]) => (\r\n                <div key={date}>\r\n                    <h3>{date}</h3>\r\n                    <Table bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>ФИО</th>\r\n                                <th>Группа</th>\r\n                                <th>Дата</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {Object.entries(groups).map(([group, students]) => (\r\n                                students.map((student, index) => (\r\n                                    <tr key={index}>\r\n                                        <td>{student.fullName}</td>\r\n                                        <td>{student.group}</td>\r\n                                        <td>{student.date}</td>\r\n                                    </tr>\r\n                                ))\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ViewProtectionSchedulePersons;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}