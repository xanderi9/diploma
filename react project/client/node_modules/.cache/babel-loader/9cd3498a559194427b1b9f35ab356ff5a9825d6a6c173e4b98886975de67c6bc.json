{"ast":null,"code":"import petrovich from 'petrovich';\nimport { saveAs } from 'file-saver';\nimport PizZip from 'pizzip';\nimport Docxtemplater from 'docxtemplater';\nimport JSZip from 'jszip';\nimport word from './protocol_kvalif.docx';\nimport RussianNouns from 'russian-nouns-js';\nconst GenerateProtocolsKvalif = async ({\n  composition_of_sec,\n  selectedGroup,\n  groupData,\n  requests,\n  group_list,\n  ei\n}) => {\n  const chairman = composition_of_sec.member_of_SEC.find(comp => comp.chairman_of_SEC === true);\n  const chairman_ei = composition_of_sec.employee_information.find(comp => comp.user_id === chairman.member_of_SEC.id);\n  const members_list = composition_of_sec.member_of_SEC.filter(sec => sec.chairman_of_SEC === false).map(member => {\n    const member_ei = composition_of_sec.employee_information.find(comp => comp.user_id === member.member_of_SEC.id);\n    console.log('гэки эи', member_ei);\n    return {\n      ...member,\n      employee_information: member_ei\n    };\n  });\n\n  // Функция для получения инициалов (Фамилия И.О.)\n  const getInitials = (firstName, patronymic) => {\n    return `${firstName.charAt(0)}. ${patronymic.charAt(0)}.`;\n  };\n  try {\n    // Загружаем шаблон документа\n    const response = await fetch(word); // Путь к вашему файлу шаблона\n    if (!response.ok) throw new Error('Ошибка сети');\n    const arrayBuffer = await response.arrayBuffer();\n\n    // Создаем инстанцию JSZip\n    const zip = new JSZip();\n\n    // Проходимся по каждому элементу groupData (предполагаем, что это массив)\n    for (const item of groupData) {\n      const student = item.user;\n\n      // Деклинация ФИО студента в нужные падежи\n      const full_name_student = {\n        last: student.last_name,\n        first: student.first_name,\n        middle: student.patronymic\n      };\n      let fullnameStudentAcc = petrovich(full_name_student, 'accusative');\n      let fullnameStudentGen = petrovich(full_name_student, 'genitive');\n      let fullnameStudentDat = petrovich(full_name_student, 'dative');\n      fullnameStudentAcc = `${fullnameStudentAcc.last} ${fullnameStudentAcc.first} ${fullnameStudentAcc.middle}`;\n      fullnameStudentGen = `${fullnameStudentGen.last} ${fullnameStudentGen.first} ${fullnameStudentGen.middle}`;\n      fullnameStudentDat = `${fullnameStudentDat.last} ${fullnameStudentDat.first} ${fullnameStudentDat.middle}`;\n      const request = requests.request_list.find(req => req.student.username === student.username);\n      if (!request) {\n        console.warn(`Для студента ${student.last_name} ${student.first_name} не найдена принятая заявка.`);\n        continue; // Пропускаем студента без принятой заявки\n      }\n      const personalProtection = requests.personal_work_protection_list.find(pp => pp.request === request.id);\n      if (!personalProtection) {\n        console.warn(`Для студента ${student.last_name} ${student.first_name} не найдена персональная защита.`);\n        continue; // Пропускаем студента без персональной защиты\n      }\n      const generalProtection = requests.general_work_protection_list.find(gp => gp.id === personalProtection.work_protection);\n      if (!generalProtection) {\n        console.warn(`Для студента ${student.last_name} ${student.first_name} не найдена общая защита.`);\n        continue; // Пропускаем студента без общей защиты\n      }\n      const teacher = request.teacher;\n      const teacher_ei = ei.find(e => e.user_id === teacher.id);\n      const theme = request.theme;\n\n      // Вычисляем время начала и окончания защиты\n      const [hours_start, min_start] = personalProtection.personal_time.split(':');\n      const startTime = new Date();\n      startTime.setHours(hours_start);\n      startTime.setMinutes(min_start);\n      startTime.setMinutes(startTime.getMinutes() + 20);\n      const hours_end = startTime.getHours();\n      const min_end = startTime.getMinutes();\n\n      // Формируем объект с данными для подстановки в шаблон\n      const dataToRender = {\n        protocol_number: personalProtection.protocol_number,\n        group_protection_date: new Date(generalProtection.date).toLocaleDateString('ru-RU'),\n        chairman_last_name: chairman.member_of_SEC.last_name,\n        chairman_np: getInitials(chairman.member_of_SEC.first_name, chairman.member_of_SEC.patronymic),\n        chairman_degree: chairman_ei.academic_degree,\n        chairman_job_title: chairman_ei.job_title,\n        members_list: members_list.map(member => ({\n          members_last_name: member.member_of_SEC.last_name,\n          members_np: getInitials(member.member_of_SEC.first_name, member.member_of_SEC.patronymic),\n          members_degree: member.employee_information.academic_degree ? member.employee_information.academic_degree : '',\n          members_job_title: member.employee_information.job_title,\n          members_place_of_work: member.employee_information.place_of_work ? member.employee_information.place_of_work.replace(member.employee_information.place_of_work.split(' ')[0], declineWord(member.employee_information.place_of_work, 'женский')) : ''\n        })),\n        student_fullname: fullnameStudentAcc,\n        student_fullname_gen: fullnameStudentGen,\n        student_fullname_dative: fullnameStudentDat,\n        specialityCode: student.group.speciality.code,\n        specialtityProgram: student.group.speciality.name,\n        theme: theme ? theme.name : '',\n        teacher_last_name: teacher.user.last_name,\n        teacher_np: getInitials(teacher.user.first_name, teacher.user.patronymic),\n        teacher_degree: teacher_ei.academic_degree,\n        teacher_job_title: teacher_ei.job_title,\n        student_last_name: student.last_name,\n        student_np: getInitials(student.first_name, student.patronymic),\n        secretary_last_name: localStorage.getItem('last_name'),\n        secretary_np: getInitials(localStorage.getItem('first_name'), localStorage.getItem('patronymic')),\n        duration: 20\n      };\n\n      // Создаем новую инстанцию Docxtemplater для каждого студента\n      const docZip = new PizZip(arrayBuffer);\n      const doc = new Docxtemplater(docZip);\n      doc.setData(dataToRender);\n      doc.render();\n\n      // Генерируем файл и добавляем его в архив\n      const output = doc.getZip().generate({\n        type: 'blob'\n      });\n      zip.file(`Протокол_${student.last_name}_${student.first_name}.docx`, output);\n    }\n\n    // Генерируем архив и сохраняем его\n    zip.generateAsync({\n      type: 'blob'\n    }).then(content => {\n      saveAs(content, `Протоколы_${selectedGroup}.zip`);\n    });\n  } catch (error) {\n    console.error('Ошибка загрузки файла:', error);\n  }\n};\n_c = GenerateProtocolsKvalif;\nexport default GenerateProtocolsKvalif;\nvar _c;\n$RefreshReg$(_c, \"GenerateProtocolsKvalif\");","map":{"version":3,"names":["petrovich","saveAs","PizZip","Docxtemplater","JSZip","word","RussianNouns","GenerateProtocolsKvalif","composition_of_sec","selectedGroup","groupData","requests","group_list","ei","chairman","member_of_SEC","find","comp","chairman_of_SEC","chairman_ei","employee_information","user_id","id","members_list","filter","sec","map","member","member_ei","console","log","getInitials","firstName","patronymic","charAt","response","fetch","ok","Error","arrayBuffer","zip","item","student","user","full_name_student","last","last_name","first","first_name","middle","fullnameStudentAcc","fullnameStudentGen","fullnameStudentDat","request","request_list","req","username","warn","personalProtection","personal_work_protection_list","pp","generalProtection","general_work_protection_list","gp","work_protection","teacher","teacher_ei","e","theme","hours_start","min_start","personal_time","split","startTime","Date","setHours","setMinutes","getMinutes","hours_end","getHours","min_end","dataToRender","protocol_number","group_protection_date","date","toLocaleDateString","chairman_last_name","chairman_np","chairman_degree","academic_degree","chairman_job_title","job_title","members_last_name","members_np","members_degree","members_job_title","members_place_of_work","place_of_work","replace","declineWord","student_fullname","student_fullname_gen","student_fullname_dative","specialityCode","group","speciality","code","specialtityProgram","name","teacher_last_name","teacher_np","teacher_degree","teacher_job_title","student_last_name","student_np","secretary_last_name","localStorage","getItem","secretary_np","duration","docZip","doc","setData","render","output","getZip","generate","type","file","generateAsync","then","content","error","_c","$RefreshReg$"],"sources":["C:/Users/79131/OneDrive/Рабочий стол/хлам/react project/client/src/components/Forms/GenerateProtocols/GenerateProtocolsKvalif.js"],"sourcesContent":["import petrovich from 'petrovich';\r\nimport { saveAs } from 'file-saver';\r\nimport PizZip from 'pizzip';\r\nimport Docxtemplater from 'docxtemplater';\r\nimport JSZip from 'jszip';\r\nimport word from './protocol_kvalif.docx';\r\nimport RussianNouns from 'russian-nouns-js';\r\n\r\nconst GenerateProtocolsKvalif = async ({\r\n    composition_of_sec,\r\n    selectedGroup,\r\n    groupData,\r\n    requests,\r\n    group_list,\r\n    ei\r\n}) => {\r\n    const chairman = composition_of_sec.member_of_SEC.find(comp => comp.chairman_of_SEC === true);\r\n    const chairman_ei = composition_of_sec.employee_information.find(comp => comp.user_id === chairman.member_of_SEC.id);\r\n    const members_list = composition_of_sec.member_of_SEC.filter(sec => sec.chairman_of_SEC === false).map(member => {\r\n        const member_ei = composition_of_sec.employee_information.find(comp => comp.user_id === member.member_of_SEC.id);\r\n        console.log('гэки эи', member_ei);\r\n        return {\r\n            ...member,\r\n            employee_information: member_ei\r\n        };\r\n    });\r\n\r\n    // Функция для получения инициалов (Фамилия И.О.)\r\n    const getInitials = (firstName, patronymic) => {\r\n        return `${firstName.charAt(0)}. ${patronymic.charAt(0)}.`;\r\n    };\r\n\r\n    try {\r\n        // Загружаем шаблон документа\r\n        const response = await fetch(word); // Путь к вашему файлу шаблона\r\n        if (!response.ok) throw new Error('Ошибка сети');\r\n        const arrayBuffer = await response.arrayBuffer();\r\n\r\n        // Создаем инстанцию JSZip\r\n        const zip = new JSZip();\r\n\r\n        // Проходимся по каждому элементу groupData (предполагаем, что это массив)\r\n        for (const item of groupData) {\r\n            const student = item.user;\r\n\r\n            // Деклинация ФИО студента в нужные падежи\r\n            const full_name_student = {\r\n                last: student.last_name,\r\n                first: student.first_name,\r\n                middle: student.patronymic,\r\n            };\r\n            let fullnameStudentAcc = petrovich(full_name_student, 'accusative');\r\n            let fullnameStudentGen = petrovich(full_name_student, 'genitive');\r\n            let fullnameStudentDat = petrovich(full_name_student, 'dative');\r\n            fullnameStudentAcc = `${fullnameStudentAcc.last} ${fullnameStudentAcc.first} ${fullnameStudentAcc.middle}`;\r\n            fullnameStudentGen = `${fullnameStudentGen.last} ${fullnameStudentGen.first} ${fullnameStudentGen.middle}`;\r\n            fullnameStudentDat = `${fullnameStudentDat.last} ${fullnameStudentDat.first} ${fullnameStudentDat.middle}`;\r\n\r\n            const request = requests.request_list.find(req => req.student.username === student.username);\r\n            if (!request) {\r\n                console.warn(`Для студента ${student.last_name} ${student.first_name} не найдена принятая заявка.`);\r\n                continue; // Пропускаем студента без принятой заявки\r\n            }\r\n\r\n            const personalProtection = requests.personal_work_protection_list.find(pp => pp.request === request.id);\r\n            if (!personalProtection) {\r\n                console.warn(`Для студента ${student.last_name} ${student.first_name} не найдена персональная защита.`);\r\n                continue; // Пропускаем студента без персональной защиты\r\n            }\r\n\r\n            const generalProtection = requests.general_work_protection_list.find(gp => gp.id === personalProtection.work_protection);\r\n            if (!generalProtection) {\r\n                console.warn(`Для студента ${student.last_name} ${student.first_name} не найдена общая защита.`);\r\n                continue; // Пропускаем студента без общей защиты\r\n            }\r\n\r\n            const teacher = request.teacher;\r\n            const teacher_ei = ei.find(e => e.user_id === teacher.id);\r\n            const theme = request.theme;\r\n\r\n            // Вычисляем время начала и окончания защиты\r\n            const [hours_start, min_start] = personalProtection.personal_time.split(':');\r\n            const startTime = new Date();\r\n            startTime.setHours(hours_start);\r\n            startTime.setMinutes(min_start);\r\n            startTime.setMinutes(startTime.getMinutes() + 20);\r\n\r\n            const hours_end = startTime.getHours();\r\n            const min_end = startTime.getMinutes();\r\n\r\n            // Формируем объект с данными для подстановки в шаблон\r\n            const dataToRender = {\r\n                protocol_number: personalProtection.protocol_number,\r\n                group_protection_date: new Date(generalProtection.date).toLocaleDateString('ru-RU'),\r\n                chairman_last_name: chairman.member_of_SEC.last_name,\r\n                chairman_np: getInitials(chairman.member_of_SEC.first_name, chairman.member_of_SEC.patronymic),\r\n                chairman_degree: chairman_ei.academic_degree,\r\n                chairman_job_title: chairman_ei.job_title,\r\n                members_list: members_list.map(member => ({\r\n                    members_last_name: member.member_of_SEC.last_name,\r\n                    members_np: getInitials(member.member_of_SEC.first_name, member.member_of_SEC.patronymic),\r\n                    members_degree: member.employee_information.academic_degree? member.employee_information.academic_degree: '',\r\n                    members_job_title: member.employee_information.job_title,\r\n                    members_place_of_work: member.employee_information.place_of_work ? member.employee_information.place_of_work.replace(member.employee_information.place_of_work.split(' ')[0], declineWord(member.employee_information.place_of_work, 'женский')) : '',\r\n                })),\r\n                student_fullname: fullnameStudentAcc,\r\n                student_fullname_gen: fullnameStudentGen,\r\n                student_fullname_dative: fullnameStudentDat,\r\n                specialityCode: student.group.speciality.code,\r\n                specialtityProgram: student.group.speciality.name,\r\n                theme: theme ? theme.name : '',\r\n                teacher_last_name: teacher.user.last_name,\r\n                teacher_np: getInitials(teacher.user.first_name, teacher.user.patronymic),\r\n                teacher_degree: teacher_ei.academic_degree,\r\n                teacher_job_title: teacher_ei.job_title,\r\n                student_last_name: student.last_name,\r\n                student_np: getInitials(student.first_name, student.patronymic),\r\n\r\n                \r\n                secretary_last_name: localStorage.getItem('last_name'),\r\n                secretary_np: getInitials(localStorage.getItem('first_name'), localStorage.getItem('patronymic')),\r\n\r\n\r\n                duration: 20,\r\n            };\r\n\r\n            // Создаем новую инстанцию Docxtemplater для каждого студента\r\n            const docZip = new PizZip(arrayBuffer);\r\n            const doc = new Docxtemplater(docZip);\r\n\r\n            doc.setData(dataToRender);\r\n            doc.render();\r\n\r\n            // Генерируем файл и добавляем его в архив\r\n            const output = doc.getZip().generate({ type: 'blob' });\r\n            zip.file(`Протокол_${student.last_name}_${student.first_name}.docx`, output);\r\n        }\r\n\r\n        // Генерируем архив и сохраняем его\r\n        zip.generateAsync({ type: 'blob' }).then((content) => {\r\n            saveAs(content, `Протоколы_${selectedGroup}.zip`);\r\n        });\r\n    } catch (error) {\r\n        console.error('Ошибка загрузки файла:', error);\r\n    }\r\n};\r\n\r\nexport default GenerateProtocolsKvalif;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}