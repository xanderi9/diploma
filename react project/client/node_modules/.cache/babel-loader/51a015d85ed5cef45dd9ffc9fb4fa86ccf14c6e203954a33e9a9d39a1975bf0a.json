{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\79131\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\\\u0445\\u043B\\u0430\\u043C\\\\react project\\\\client\\\\src\\\\components\\\\ProtectionSchedule\\\\ViewProtectionSchedulePersons.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ViewProtectionSchedulePersons({\n  protection_schedule,\n  students_list_for_schedule\n}) {\n  // Функция для форматирования даты\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    const options = {\n      day: 'numeric',\n      month: 'numeric',\n      year: 'numeric'\n    };\n    return date.toLocaleDateString('ru-RU', options);\n  };\n  const getFullName = studentData => {\n    if (studentData && studentData.student) {\n      const {\n        last_name,\n        first_name,\n        patronymic\n      } = studentData.student;\n      return `${last_name} ${first_name} ${patronymic}`;\n    } else {\n      return 'Unknown';\n    }\n  };\n\n  // Функция для получения группы по ID\n  const getGroupNameById = groupId => {\n    var _group$group;\n    const group = protection_schedule.find(item => {\n      var _item$group;\n      return ((_item$group = item.group) === null || _item$group === void 0 ? void 0 : _item$group.id) === groupId;\n    });\n    return group ? (_group$group = group.group) === null || _group$group === void 0 ? void 0 : _group$group.name : '';\n  };\n\n  // Группировка расписания по дням и фамилиям\n  const groupedSchedule = protection_schedule.reduce((acc, item) => {\n    const dateKey = formatDate(item.date);\n    if (!acc[dateKey]) {\n      acc[dateKey] = {};\n    }\n    const students = students_list_for_schedule.filter(student => {\n      var _student$student, _student$student$grou, _item$group2;\n      return ((_student$student = student.student) === null || _student$student === void 0 ? void 0 : (_student$student$grou = _student$student.group) === null || _student$student$grou === void 0 ? void 0 : _student$student$grou.id) === ((_item$group2 = item.group) === null || _item$group2 === void 0 ? void 0 : _item$group2.id);\n    });\n    students.forEach(student => {\n      var _item$group3;\n      const fullName = getFullName(student);\n      if (!acc[dateKey][fullName]) {\n        acc[dateKey][fullName] = [];\n      }\n      acc[dateKey][fullName].push({\n        student,\n        date: formatDate(item.date),\n        group: getGroupNameById((_item$group3 = item.group) === null || _item$group3 === void 0 ? void 0 : _item$group3.id)\n      });\n    });\n    return acc;\n  }, {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(groupedSchedule).map(([date, items]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), Object.entries(items).map(([fullName, students]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: fullName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: students.map((student, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: student.date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: student.group\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 45\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }, this)]\n      }, fullName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }, this))]\n    }, date, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_c = ViewProtectionSchedulePersons;\nexport default ViewProtectionSchedulePersons;\nvar _c;\n$RefreshReg$(_c, \"ViewProtectionSchedulePersons\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ViewProtectionSchedulePersons","protection_schedule","students_list_for_schedule","formatDate","dateString","date","Date","options","day","month","year","toLocaleDateString","getFullName","studentData","student","last_name","first_name","patronymic","getGroupNameById","groupId","_group$group","group","find","item","_item$group","id","name","groupedSchedule","reduce","acc","dateKey","students","filter","_student$student","_student$student$grou","_item$group2","forEach","_item$group3","fullName","push","children","Object","entries","map","items","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["C:/Users/79131/OneDrive/Рабочий стол/хлам/react project/client/src/components/ProtectionSchedule/ViewProtectionSchedulePersons.js"],"sourcesContent":["import React from 'react';\r\n\r\nfunction ViewProtectionSchedulePersons({ protection_schedule, students_list_for_schedule }) {\r\n    // Функция для форматирования даты\r\n    const formatDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        const options = { day: 'numeric', month: 'numeric', year: 'numeric' };\r\n        return date.toLocaleDateString('ru-RU', options);\r\n    };\r\n\r\n    const getFullName = (studentData) => {\r\n        if (studentData && studentData.student) {\r\n            const { last_name, first_name, patronymic } = studentData.student;\r\n            return `${last_name} ${first_name} ${patronymic}`;\r\n        } else {\r\n            return 'Unknown';\r\n        }\r\n    };\r\n    \r\n\r\n    // Функция для получения группы по ID\r\n    const getGroupNameById = (groupId) => {\r\n        const group = protection_schedule.find(item => item.group?.id === groupId);\r\n        return group ? group.group?.name : '';\r\n    };\r\n\r\n    // Группировка расписания по дням и фамилиям\r\n    const groupedSchedule = protection_schedule.reduce((acc, item) => {\r\n        const dateKey = formatDate(item.date);\r\n        if (!acc[dateKey]) {\r\n            acc[dateKey] = {};\r\n        }\r\n        const students = students_list_for_schedule.filter(student => student.student?.group?.id === item.group?.id);\r\n        students.forEach(student => {\r\n            const fullName = getFullName(student);\r\n            if (!acc[dateKey][fullName]) {\r\n                acc[dateKey][fullName] = [];\r\n            }\r\n            acc[dateKey][fullName].push({ student, date: formatDate(item.date), group: getGroupNameById(item.group?.id) });\r\n        });\r\n        return acc;\r\n    }, {});\r\n\r\n    return (\r\n        <div>\r\n            {Object.entries(groupedSchedule).map(([date, items]) => (\r\n                <div key={date}>\r\n                    <h3>{date}</h3>\r\n                    {Object.entries(items).map(([fullName, students]) => (\r\n                        <div key={fullName}>\r\n                            <h4>{fullName}</h4>\r\n                            <table>\r\n                                <tbody>\r\n                                    {students.map((student, index) => (\r\n                                        <tr key={index}>\r\n                                            <td>{student.date}</td>\r\n                                            <td>{student.group}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ViewProtectionSchedulePersons;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}